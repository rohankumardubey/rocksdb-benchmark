<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (3,092 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.39%)</title><rect x="10.0" y="403.0" width="4.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/Query.main (3,024 samples, 97.80%)</title><rect x="14.6" y="403.0" width="1154.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.6" y="414.0">com/sodonnell/rocksdb/Query.main</text>
</g>
<g>
<title>com/sodonnell/rocksdb/Query.queryForType (3,024 samples, 97.80%)</title><rect x="14.6" y="387.0" width="1154.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="17.6" y="398.0">com/sodonnell/rocksdb/Query.queryForType</text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryData.walkRandom (3,024 samples, 97.80%)</title><rect x="14.6" y="371.0" width="1154.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="382.0">com/sodonnell/rocksdb/QueryData.walkRandom</text>
</g>
<g>
<title>com/sodonnell/rocksdb/ByteUtils.dirBytes (93 samples, 3.01%)</title><rect x="15.3" y="355.0" width="35.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.3" y="366.0">com..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/ByteUtils.longToBytes (1 samples, 0.03%)</title><rect x="15.3" y="339.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.3" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="15.3" y="323.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="18.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (90 samples, 2.91%)</title><rect x="15.7" y="339.0" width="34.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.7" y="350.0">ja..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (74 samples, 2.39%)</title><rect x="19.9" y="323.0" width="28.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.9" y="334.0">ja..</text>
</g>
<g>
<title>java/lang/StringCoding$StringEncoder.encode (64 samples, 2.07%)</title><rect x="23.7" y="307.0" width="24.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.7" y="318.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.16%)</title><rect x="48.2" y="323.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="51.2" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.06%)</title><rect x="50.1" y="339.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.1" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="50.1" y="323.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="53.1" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="50.1" y="307.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="53.1" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (2 samples, 0.06%)</title><rect x="50.1" y="291.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="53.1" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (2 samples, 0.06%)</title><rect x="50.1" y="275.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="53.1" y="286.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.06%)</title><rect x="50.1" y="259.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="53.1" y="270.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (2 samples, 0.06%)</title><rect x="50.1" y="243.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="53.1" y="254.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.06%)</title><rect x="50.1" y="227.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="53.1" y="238.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.06%)</title><rect x="50.1" y="211.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="53.1" y="222.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.06%)</title><rect x="50.1" y="195.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="53.1" y="206.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.06%)</title><rect x="50.1" y="179.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="53.1" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="50.1" y="163.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="53.1" y="174.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryDataFlatBuffer.findNextId (14 samples, 0.45%)</title><rect x="50.8" y="355.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.45%)</title><rect x="50.8" y="339.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.45%)</title><rect x="50.8" y="323.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.8" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="55.4" y="307.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="58.4" y="318.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/RocksDBTable.find (2,915 samples, 94.28%)</title><rect x="56.2" y="355.0" width="1112.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.2" y="366.0">com/sodonnell/rocksdb/RocksDBTable.find</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,915 samples, 94.28%)</title><rect x="56.2" y="339.0" width="1112.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.2" y="350.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.13%)</title><rect x="60.8" y="323.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.8" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="62.3" y="323.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="65.3" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,897 samples, 93.69%)</title><rect x="63.0" y="323.0" width="1105.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.0" y="334.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (2,889 samples, 93.43%)</title><rect x="65.7" y="307.0" width="1102.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="68.7" y="318.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="67.6" y="291.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="70.6" y="302.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="68.0" y="291.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="71.0" y="302.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="68.4" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="71.4" y="302.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="68.8" y="291.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="71.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="69.2" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="72.2" y="302.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2,875 samples, 92.98%)</title><rect x="69.5" y="291.0" width="1097.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="72.5" y="302.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int)</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="71.8" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="74.8" y="286.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (138 samples, 4.46%)</title><rect x="72.2" y="275.0" width="52.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="75.2" y="286.0">Java_..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="73.7" y="259.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="76.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="74.1" y="259.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="77.1" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.23%)</title><rect x="74.9" y="259.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="77.9" y="270.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.03%)</title><rect x="77.5" y="259.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="80.5" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (27 samples, 0.87%)</title><rect x="77.9" y="259.0" width="10.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="80.9" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.10%)</title><rect x="78.3" y="243.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="81.3" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="79.5" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.5" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 0.39%)</title><rect x="79.8" y="243.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="82.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (10 samples, 0.32%)</title><rect x="84.4" y="243.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="87.4" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (59 samples, 1.91%)</title><rect x="88.2" y="259.0" width="22.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="91.2" y="270.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.19%)</title><rect x="89.8" y="243.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="92.8" y="254.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (3 samples, 0.10%)</title><rect x="92.1" y="243.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="95.1" y="254.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.06%)</title><rect x="93.2" y="243.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="96.2" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="93.6" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="96.6" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="94.0" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="97.0" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.26%)</title><rect x="94.3" y="243.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.16%)</title><rect x="97.4" y="243.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.4" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (30 samples, 0.97%)</title><rect x="99.3" y="243.0" width="11.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="102.3" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (27 samples, 0.87%)</title><rect x="100.4" y="227.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="103.4" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="106.6" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="109.6" y="222.0"></text>
</g>
<g>
<title>oopDesc::size() (5 samples, 0.16%)</title><rect x="106.9" y="211.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="109.9" y="222.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (5 samples, 0.16%)</title><rect x="108.8" y="211.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="111.8" y="222.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (37 samples, 1.20%)</title><rect x="110.8" y="259.0" width="14.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="113.8" y="270.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.19%)</title><rect x="113.4" y="243.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="116.4" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (10 samples, 0.32%)</title><rect x="115.7" y="243.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="118.7" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (10 samples, 0.32%)</title><rect x="119.5" y="243.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="122.5" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.13%)</title><rect x="123.3" y="243.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="126.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="124.9" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="127.9" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.03%)</title><rect x="125.3" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="128.3" y="286.0"></text>
</g>
<g>
<title>YieldingFlexibleGangWorker::~YieldingFlexibleGangWorker() (1 samples, 0.03%)</title><rect x="125.6" y="275.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="128.6" y="286.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.03%)</title><rect x="126.0" y="275.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="129.0" y="286.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (3 samples, 0.10%)</title><rect x="126.4" y="275.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="129.4" y="286.0"></text>
</g>
<g>
<title>free (28 samples, 0.91%)</title><rect x="127.5" y="275.0" width="10.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="130.5" y="286.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.06%)</title><rect x="131.4" y="259.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="134.4" y="270.0"></text>
</g>
<g>
<title>tiny_size (16 samples, 0.52%)</title><rect x="132.1" y="259.0" width="6.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="135.1" y="270.0"></text>
</g>
<g>
<title>free_tiny (76 samples, 2.46%)</title><rect x="138.2" y="275.0" width="29.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="141.2" y="286.0">fr..</text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.06%)</title><rect x="150.8" y="259.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="153.8" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (41 samples, 1.33%)</title><rect x="151.6" y="259.0" width="15.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="154.6" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (7 samples, 0.23%)</title><rect x="164.6" y="243.0" width="2.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="167.6" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (25 samples, 0.81%)</title><rect x="167.2" y="275.0" width="9.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="170.2" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.13%)</title><rect x="168.4" y="259.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="171.4" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="169.9" y="259.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="172.9" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.36%)</title><rect x="170.3" y="259.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="173.3" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (6 samples, 0.19%)</title><rect x="174.5" y="259.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="177.5" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (31 samples, 1.00%)</title><rect x="176.8" y="275.0" width="11.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="179.8" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="179.4" y="259.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="182.4" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (10 samples, 0.32%)</title><rect x="179.8" y="259.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="182.8" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (8 samples, 0.26%)</title><rect x="183.6" y="259.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="186.6" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.16%)</title><rect x="186.7" y="259.0" width="1.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="189.7" y="270.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="188.6" y="275.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="191.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,472 samples, 79.95%)</title><rect x="189.0" y="275.0" width="943.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="192.0" y="286.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocato..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,469 samples, 79.85%)</title><rect x="189.7" y="259.0" width="942.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="192.7" y="270.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocato..</text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (3 samples, 0.10%)</title><rect x="190.9" y="243.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (25 samples, 0.81%)</title><rect x="192.0" y="243.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="195.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (2 samples, 0.06%)</title><rect x="192.0" y="227.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="195.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (4 samples, 0.13%)</title><rect x="192.8" y="227.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="195.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (13 samples, 0.42%)</title><rect x="194.3" y="227.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="197.3" y="238.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="195.5" y="211.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="198.5" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.19%)</title><rect x="195.9" y="211.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="198.9" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.06%)</title><rect x="198.1" y="211.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="201.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="198.9" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="201.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (6 samples, 0.19%)</title><rect x="199.3" y="227.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="202.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2,382 samples, 77.04%)</title><rect x="201.6" y="243.0" width="909.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="204.6" y="254.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*)</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.06%)</title><rect x="208.8" y="227.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="211.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.06%)</title><rect x="209.6" y="227.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="212.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="210.4" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="213.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (2,341 samples, 75.71%)</title><rect x="210.7" y="227.0" width="893.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="213.7" y="238.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions)</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="217.6" y="211.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="220.6" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (9 samples, 0.29%)</title><rect x="218.0" y="211.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="221.0" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="221.4" y="211.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="224.4" y="222.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="221.8" y="211.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="224.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (2 samples, 0.06%)</title><rect x="222.6" y="211.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="225.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (4 samples, 0.13%)</title><rect x="223.3" y="211.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="226.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (16 samples, 0.52%)</title><rect x="224.9" y="211.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="227.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (8 samples, 0.26%)</title><rect x="225.6" y="195.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="228.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="228.3" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="231.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (6 samples, 0.19%)</title><rect x="228.7" y="195.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="231.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.06%)</title><rect x="230.2" y="179.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="233.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (9 samples, 0.29%)</title><rect x="231.0" y="211.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="234.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="231.3" y="195.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="234.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (7 samples, 0.23%)</title><rect x="231.7" y="195.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="234.7" y="206.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="234.0" y="179.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="237.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::Env::Default() (40 samples, 1.29%)</title><rect x="234.4" y="211.0" width="15.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="237.4" y="222.0"></text>
</g>
<g>
<title>gettimeofday (33 samples, 1.07%)</title><rect x="235.2" y="195.0" width="12.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="238.2" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (31 samples, 1.00%)</title><rect x="235.9" y="179.0" width="11.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="238.9" y="190.0"></text>
</g>
<g>
<title>_res (26 samples, 0.84%)</title><rect x="237.8" y="163.0" width="10.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="240.8" y="174.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.16%)</title><rect x="247.8" y="195.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="250.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (1 samples, 0.03%)</title><rect x="249.7" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="252.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetContext::ReportCounters() (1 samples, 0.03%)</title><rect x="250.0" y="211.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="253.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::HistogramImpl::Add(unsigned long long) (38 samples, 1.23%)</title><rect x="250.4" y="211.0" width="14.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="253.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (10 samples, 0.32%)</title><rect x="264.9" y="211.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="267.9" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.16%)</title><rect x="266.8" y="195.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="269.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (3 samples, 0.10%)</title><rect x="268.7" y="211.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="271.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long long) (16 samples, 0.52%)</title><rect x="269.9" y="211.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="272.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (30 samples, 0.97%)</title><rect x="276.0" y="211.0" width="11.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="279.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="287.4" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="290.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (1,853 samples, 59.93%)</title><rect x="287.8" y="211.0" width="707.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="290.8" y="222.0">rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlic..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (3 samples, 0.10%)</title><rect x="297.0" y="195.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="300.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (7 samples, 0.23%)</title><rect x="298.1" y="195.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="301.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (14 samples, 0.45%)</title><rect x="300.8" y="195.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="303.8" y="206.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (10 samples, 0.32%)</title><rect x="302.3" y="179.0" width="3.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="305.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetContext::ReportCounters() (217 samples, 7.02%)</title><rect x="306.1" y="195.0" width="82.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="309.1" y="206.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (25 samples, 0.81%)</title><rect x="308.4" y="179.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="311.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (186 samples, 6.02%)</title><rect x="318.0" y="179.0" width="71.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="321.0" y="190.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (6 samples, 0.19%)</title><rect x="389.0" y="195.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="392.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.10%)</title><rect x="391.2" y="195.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="394.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (9 samples, 0.29%)</title><rect x="392.4" y="195.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="395.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int) (1,434 samples, 46.38%)</title><rect x="395.8" y="195.0" width="547.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="398.8" y="206.0">rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyCo..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="402.3" y="179.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="405.3" y="190.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="402.7" y="179.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="405.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (3 samples, 0.10%)</title><rect x="403.1" y="179.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="406.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (1,403 samples, 45.38%)</title><rect x="404.2" y="179.0" width="535.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="407.2" y="190.0">rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice ..</text>
</g>
<g>
<title>default_zone_free_definite_size (3 samples, 0.10%)</title><rect x="426.0" y="163.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="429.0" y="174.0"></text>
</g>
<g>
<title>free (7 samples, 0.23%)</title><rect x="427.1" y="163.0" width="2.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="430.1" y="174.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.06%)</title><rect x="427.1" y="147.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="430.1" y="158.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.16%)</title><rect x="427.9" y="147.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="430.9" y="158.0"></text>
</g>
<g>
<title>free_tiny (14 samples, 0.45%)</title><rect x="429.8" y="163.0" width="5.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="432.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (29 samples, 0.94%)</title><rect x="435.1" y="163.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="438.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (10 samples, 0.32%)</title><rect x="437.0" y="147.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="440.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (14 samples, 0.45%)</title><rect x="440.9" y="147.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="443.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (1 samples, 0.03%)</title><rect x="446.2" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="449.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (1 samples, 0.03%)</title><rect x="446.6" y="163.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="449.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::TryReadPropertiesWithGlobalSeqno(rocksdb::FilePrefetchBuffer*, rocksdb::Slice const&amp;, rocksdb::TableProperties**) (261 samples, 8.44%)</title><rect x="447.0" y="163.0" width="99.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="450.0" y="174.0">rocksdb::Blo..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="453.8" y="147.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="456.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (14 samples, 0.45%)</title><rect x="454.2" y="147.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="457.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (1 samples, 0.03%)</title><rect x="459.6" y="147.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="462.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (226 samples, 7.31%)</title><rect x="459.9" y="147.0" width="86.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="462.9" y="158.0">rocksdb::S..</text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (218 samples, 7.05%)</title><rect x="461.8" y="131.0" width="83.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="464.8" y="142.0">rocksdb::..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.13%)</title><rect x="468.0" y="115.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="471.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (193 samples, 6.24%)</title><rect x="469.5" y="115.0" width="73.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="472.5" y="126.0">rocksdb:..</text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (5 samples, 0.16%)</title><rect x="471.8" y="99.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="474.8" y="110.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="473.7" y="99.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="476.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (7 samples, 0.23%)</title><rect x="474.1" y="99.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="477.1" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="476.4" y="83.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="479.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (4 samples, 0.13%)</title><rect x="476.7" y="99.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="479.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (160 samples, 5.17%)</title><rect x="478.3" y="99.0" width="61.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="481.3" y="110.0">rocksd..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="528.3" y="83.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="531.3" y="94.0"></text>
</g>
<g>
<title>_platform_memcmp (8 samples, 0.26%)</title><rect x="528.6" y="83.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="531.6" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.19%)</title><rect x="531.7" y="83.0" width="2.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="534.7" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.29%)</title><rect x="534.0" y="83.0" width="3.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="537.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.06%)</title><rect x="537.4" y="83.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="540.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.10%)</title><rect x="538.2" y="83.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="541.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (8 samples, 0.26%)</title><rect x="539.3" y="99.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="542.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="542.4" y="99.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="545.4" y="110.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="542.8" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="545.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::Value(rocksdb::Cache::Handle*) (4 samples, 0.13%)</title><rect x="543.1" y="115.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="546.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (1 samples, 0.03%)</title><rect x="544.7" y="115.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="547.7" y="126.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (3 samples, 0.10%)</title><rect x="545.0" y="131.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="548.0" y="142.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="546.2" y="147.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="549.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (18 samples, 0.58%)</title><rect x="546.6" y="163.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="549.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (7 samples, 0.23%)</title><rect x="550.4" y="147.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="553.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (3 samples, 0.10%)</title><rect x="551.9" y="131.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="554.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (1 samples, 0.03%)</title><rect x="553.1" y="147.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="556.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.03%)</title><rect x="553.4" y="163.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="556.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.03%)</title><rect x="553.4" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="556.4" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="553.4" y="131.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="556.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (2 samples, 0.06%)</title><rect x="553.8" y="163.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="556.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (439 samples, 14.20%)</title><rect x="554.6" y="163.0" width="167.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="557.6" y="174.0">rocksdb::DataBlockIte..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.16%)</title><rect x="589.3" y="147.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="592.3" y="158.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="591.2" y="147.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="594.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (234 samples, 7.57%)</title><rect x="592.0" y="147.0" width="89.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="595.0" y="158.0">rocksdb::D..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="646.2" y="131.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="649.2" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (31 samples, 1.00%)</title><rect x="646.6" y="131.0" width="11.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="649.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (58 samples, 1.88%)</title><rect x="658.4" y="131.0" width="22.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="661.4" y="142.0">r..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="659.5" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="662.5" y="126.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="659.9" y="115.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="662.9" y="126.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (53 samples, 1.71%)</title><rect x="660.3" y="115.0" width="20.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="663.3" y="126.0"></text>
</g>
<g>
<title>malloc (53 samples, 1.71%)</title><rect x="660.3" y="99.0" width="20.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="663.3" y="110.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="660.7" y="83.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="663.7" y="94.0"></text>
</g>
<g>
<title>malloc_zone_malloc (50 samples, 1.62%)</title><rect x="661.1" y="83.0" width="19.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="664.1" y="94.0"></text>
</g>
<g>
<title>default_zone_malloc (13 samples, 0.42%)</title><rect x="661.4" y="67.0" width="5.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="664.4" y="78.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (35 samples, 1.13%)</title><rect x="666.4" y="67.0" width="13.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="669.4" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (35 samples, 1.13%)</title><rect x="666.4" y="51.0" width="13.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="669.4" y="62.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (4 samples, 0.13%)</title><rect x="674.0" y="35.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="677.0" y="46.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (11 samples, 0.36%)</title><rect x="675.6" y="35.0" width="4.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="678.6" y="46.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="679.8" y="67.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="682.8" y="78.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="680.1" y="83.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="683.1" y="94.0"></text>
</g>
<g>
<title>vtable for std::__1::messages&lt;char&gt; (1 samples, 0.03%)</title><rect x="680.5" y="131.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="683.5" y="142.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="680.9" y="131.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="683.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="681.3" y="147.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="684.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetVarint32PtrFallback(char const*, char const*, unsigned int*) (6 samples, 0.19%)</title><rect x="682.1" y="147.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="685.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (93 samples, 3.01%)</title><rect x="684.3" y="147.0" width="35.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="687.3" y="158.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attrs (11 samples, 0.36%)</title><rect x="693.9" y="131.0" width="4.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="696.9" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.10%)</title><rect x="698.1" y="131.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="701.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (48 samples, 1.55%)</title><rect x="699.2" y="131.0" width="18.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="702.2" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (30 samples, 0.97%)</title><rect x="706.1" y="115.0" width="11.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="709.1" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (6 samples, 0.19%)</title><rect x="717.5" y="131.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="720.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.16%)</title><rect x="719.8" y="147.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="722.8" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="721.7" y="147.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="724.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (23 samples, 0.74%)</title><rect x="722.1" y="163.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="725.1" y="174.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="724.8" y="147.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="727.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::DelegateCleanupsTo(rocksdb::Cleanable*) (3 samples, 0.10%)</title><rect x="725.2" y="147.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (12 samples, 0.39%)</title><rect x="726.3" y="147.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="729.3" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (9 samples, 0.29%)</title><rect x="727.5" y="131.0" width="3.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="730.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (537 samples, 17.37%)</title><rect x="730.9" y="163.0" width="204.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="733.9" y="174.0">rocksdb::IndexBlockIter::Se..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.16%)</title><rect x="846.2" y="147.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="849.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (10 samples, 0.32%)</title><rect x="848.1" y="147.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="851.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (212 samples, 6.86%)</title><rect x="851.9" y="147.0" width="80.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.9" y="158.0">rocksdb::..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="872.1" y="131.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="875.1" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (19 samples, 0.61%)</title><rect x="872.5" y="131.0" width="7.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="875.5" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.13%)</title><rect x="879.7" y="131.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="882.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (124 samples, 4.01%)</title><rect x="881.3" y="131.0" width="47.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="884.3" y="142.0">rock..</text>
</g>
<g>
<title>_platform_memcmp (91 samples, 2.94%)</title><rect x="893.9" y="115.0" width="34.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="896.9" y="126.0">_p..</text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (11 samples, 0.36%)</title><rect x="928.6" y="131.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.16%)</title><rect x="932.8" y="147.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="935.8" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.10%)</title><rect x="934.7" y="147.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (3 samples, 0.10%)</title><rect x="935.8" y="163.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (5 samples, 0.16%)</title><rect x="937.0" y="163.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="938.9" y="163.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="941.9" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="939.3" y="163.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (3 samples, 0.10%)</title><rect x="939.7" y="179.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::TryReadPropertiesWithGlobalSeqno(rocksdb::FilePrefetchBuffer*, rocksdb::Slice const&amp;, rocksdb::TableProperties**) (2 samples, 0.06%)</title><rect x="940.8" y="179.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (3 samples, 0.10%)</title><rect x="941.6" y="179.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.6" y="190.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (1 samples, 0.03%)</title><rect x="942.7" y="179.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="945.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (76 samples, 2.46%)</title><rect x="943.1" y="195.0" width="29.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.1" y="206.0">ro..</text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (45 samples, 1.46%)</title><rect x="947.7" y="179.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.7" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.06%)</title><rect x="948.8" y="163.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="951.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (35 samples, 1.13%)</title><rect x="949.6" y="163.0" width="13.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.6" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.19%)</title><rect x="953.8" y="147.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="956.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (14 samples, 0.45%)</title><rect x="956.1" y="147.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.1" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (9 samples, 0.29%)</title><rect x="958.0" y="131.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="961.0" y="142.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.13%)</title><rect x="961.4" y="147.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.16%)</title><rect x="962.9" y="163.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (19 samples, 0.61%)</title><rect x="964.8" y="179.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.8" y="190.0"></text>
</g>
<g>
<title>_platform_memcmp (13 samples, 0.42%)</title><rect x="967.1" y="163.0" width="5.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="970.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (60 samples, 1.94%)</title><rect x="972.1" y="195.0" width="22.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.1" y="206.0">r..</text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (283 samples, 9.15%)</title><rect x="995.0" y="211.0" width="108.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.0" y="222.0">rocksdb::port..</text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.10%)</title><rect x="1103.0" y="211.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::Env::Default() (3 samples, 0.10%)</title><rect x="1104.1" y="227.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.13%)</title><rect x="1105.3" y="227.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.03%)</title><rect x="1106.8" y="227.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long long) (1 samples, 0.03%)</title><rect x="1107.2" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (3 samples, 0.10%)</title><rect x="1107.6" y="227.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::StatisticsJni::HistEnabledForType(unsigned int) const (5 samples, 0.16%)</title><rect x="1108.7" y="227.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.03%)</title><rect x="1110.6" y="243.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.03%)</title><rect x="1111.0" y="243.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.0" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (54 samples, 1.75%)</title><rect x="1111.4" y="243.0" width="20.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.4" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="1112.1" y="227.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1115.1" y="238.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.06%)</title><rect x="1112.9" y="227.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1115.9" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (47 samples, 1.52%)</title><rect x="1113.7" y="227.0" width="17.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.7" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (9 samples, 0.29%)</title><rect x="1114.4" y="211.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1117.4" y="222.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (36 samples, 1.16%)</title><rect x="1117.9" y="211.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.9" y="222.0"></text>
</g>
<g>
<title>malloc (35 samples, 1.13%)</title><rect x="1118.3" y="195.0" width="13.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1121.3" y="206.0"></text>
</g>
<g>
<title>malloc_zone_malloc (35 samples, 1.13%)</title><rect x="1118.3" y="179.0" width="13.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1121.3" y="190.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="1119.0" y="163.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1122.0" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (32 samples, 1.03%)</title><rect x="1119.4" y="163.0" width="12.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1122.4" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (30 samples, 0.97%)</title><rect x="1120.2" y="147.0" width="11.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1123.2" y="158.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (2 samples, 0.06%)</title><rect x="1127.4" y="131.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1130.4" y="142.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.10%)</title><rect x="1128.2" y="131.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1131.2" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (6 samples, 0.19%)</title><rect x="1129.3" y="131.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1132.3" y="142.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.03%)</title><rect x="1131.6" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.6" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1132.0" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.0" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (60 samples, 1.94%)</title><rect x="1132.4" y="275.0" width="22.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.4" y="286.0">s..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.16%)</title><rect x="1132.8" y="259.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1135.8" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (54 samples, 1.75%)</title><rect x="1134.7" y="259.0" width="20.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.7" y="270.0"></text>
</g>
<g>
<title>malloc (53 samples, 1.71%)</title><rect x="1135.0" y="243.0" width="20.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1138.0" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (53 samples, 1.71%)</title><rect x="1135.0" y="227.0" width="20.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1138.0" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="1136.2" y="211.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1139.2" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (48 samples, 1.55%)</title><rect x="1136.6" y="211.0" width="18.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1139.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (47 samples, 1.52%)</title><rect x="1137.0" y="195.0" width="17.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1140.0" y="206.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (3 samples, 0.10%)</title><rect x="1150.3" y="179.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1153.3" y="190.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.06%)</title><rect x="1151.5" y="179.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1154.5" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (7 samples, 0.23%)</title><rect x="1152.2" y="179.0" width="2.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1155.2" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1154.9" y="211.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1157.9" y="222.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (2 samples, 0.06%)</title><rect x="1155.3" y="275.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="286.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (28 samples, 0.91%)</title><rect x="1156.0" y="275.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>malloc (28 samples, 0.91%)</title><rect x="1156.0" y="259.0" width="10.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (26 samples, 0.84%)</title><rect x="1156.4" y="243.0" width="9.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1159.4" y="254.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.06%)</title><rect x="1156.8" y="227.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1159.8" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (23 samples, 0.74%)</title><rect x="1157.6" y="227.0" width="8.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1160.6" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (23 samples, 0.74%)</title><rect x="1157.6" y="211.0" width="8.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1160.6" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1166.3" y="243.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1169.3" y="254.0"></text>
</g>
<g>
<title>szone_free_definite_size (3 samples, 0.10%)</title><rect x="1166.7" y="291.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1169.7" y="302.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;wchar_t, std::__1::istreambuf_iterator&lt;wchar_t, std::__1::char_traits&lt;wchar_t&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="1167.9" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (1 samples, 0.03%)</title><rect x="1168.2" y="307.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.2" y="318.0"></text>
</g>
<g>
<title>thread_start (33 samples, 1.07%)</title><rect x="1168.6" y="403.0" width="12.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1171.6" y="414.0"></text>
</g>
<g>
<title>_pthread_start (33 samples, 1.07%)</title><rect x="1168.6" y="387.0" width="12.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1171.6" y="398.0"></text>
</g>
<g>
<title>_pthread_body (33 samples, 1.07%)</title><rect x="1168.6" y="371.0" width="12.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1171.6" y="382.0"></text>
</g>
<g>
<title>java_start(Thread*) (33 samples, 1.07%)</title><rect x="1168.6" y="355.0" width="12.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1171.6" y="366.0"></text>
</g>
<g>
<title>GCTaskThread::run() (22 samples, 0.71%)</title><rect x="1168.6" y="339.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.6" y="350.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (11 samples, 0.36%)</title><rect x="1168.6" y="323.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (10 samples, 0.32%)</title><rect x="1168.6" y="307.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.6" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (10 samples, 0.32%)</title><rect x="1168.6" y="291.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.6" y="302.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (9 samples, 0.29%)</title><rect x="1168.6" y="275.0" width="3.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1171.6" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (9 samples, 0.29%)</title><rect x="1168.6" y="259.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.6" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.23%)</title><rect x="1168.6" y="243.0" width="2.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1171.6" y="254.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="1171.3" y="243.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1174.3" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1171.7" y="227.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1174.7" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1171.7" y="211.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1174.7" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="1172.1" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.1" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1172.1" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.1" y="270.0"></text>
</g>
<g>
<title>SynchronizedGCTaskQueue::is_empty() const (1 samples, 0.03%)</title><rect x="1172.4" y="307.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.4" y="318.0"></text>
</g>
<g>
<title>GCTaskManager::note_completion(unsigned int) (1 samples, 0.03%)</title><rect x="1172.8" y="323.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.8" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="1172.8" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.8" y="318.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (1 samples, 0.03%)</title><rect x="1173.2" y="323.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="334.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="1173.2" y="307.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.2" y="318.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (1 samples, 0.03%)</title><rect x="1173.6" y="323.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="334.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.03%)</title><rect x="1173.6" y="307.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="318.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (1 samples, 0.03%)</title><rect x="1173.6" y="291.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="302.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (1 samples, 0.03%)</title><rect x="1173.6" y="275.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="286.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (6 samples, 0.19%)</title><rect x="1174.0" y="323.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.0" y="334.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.19%)</title><rect x="1174.0" y="307.0" width="2.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1177.0" y="318.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (2 samples, 0.06%)</title><rect x="1176.3" y="323.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.06%)</title><rect x="1176.3" y="307.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>CodeBlobToOopClosure::do_nmethod(nmethod*) (1 samples, 0.03%)</title><rect x="1176.3" y="291.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1176.3" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>oop_Relocation::unpack_data() (1 samples, 0.03%)</title><rect x="1176.3" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>StackFrameStream::next() (1 samples, 0.03%)</title><rect x="1176.6" y="291.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="302.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1176.6" y="275.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="286.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1176.6" y="259.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="270.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1176.6" y="243.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="1176.6" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="1176.6" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="222.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.26%)</title><rect x="1177.0" y="339.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="350.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.26%)</title><rect x="1177.0" y="323.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="334.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="1177.0" y="307.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="318.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="1177.0" y="291.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1180.0" y="302.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (7 samples, 0.23%)</title><rect x="1177.4" y="307.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="318.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (7 samples, 0.23%)</title><rect x="1177.4" y="291.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="302.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (7 samples, 0.23%)</title><rect x="1177.4" y="275.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="286.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (7 samples, 0.23%)</title><rect x="1177.4" y="259.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="270.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (7 samples, 0.23%)</title><rect x="1177.4" y="243.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="254.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (7 samples, 0.23%)</title><rect x="1177.4" y="227.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="238.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.03%)</title><rect x="1177.4" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="222.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="1177.4" y="195.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="206.0"></text>
</g>
<g>
<title>PSYoungGen::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="1177.4" y="179.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="190.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.03%)</title><rect x="1177.4" y="163.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="174.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.03%)</title><rect x="1177.4" y="147.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="158.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.03%)</title><rect x="1177.4" y="131.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1180.4" y="142.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.03%)</title><rect x="1177.4" y="115.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1180.4" y="126.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.03%)</title><rect x="1177.4" y="99.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1180.4" y="110.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.03%)</title><rect x="1177.4" y="83.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1180.4" y="94.0"></text>
</g>
<g>
<title>__sfvwrite (1 samples, 0.03%)</title><rect x="1177.4" y="67.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1180.4" y="78.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1177.4" y="51.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1180.4" y="62.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (1 samples, 0.03%)</title><rect x="1177.8" y="211.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="222.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (1 samples, 0.03%)</title><rect x="1177.8" y="195.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="206.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1177.8" y="179.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="190.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1177.8" y="163.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="174.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.03%)</title><rect x="1177.8" y="147.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1180.8" y="158.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1177.8" y="131.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1177.8" y="115.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1180.8" y="126.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (5 samples, 0.16%)</title><rect x="1178.2" y="211.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="222.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (5 samples, 0.16%)</title><rect x="1178.2" y="195.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="206.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.10%)</title><rect x="1180.1" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.10%)</title><rect x="1180.1" y="323.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.10%)</title><rect x="1180.1" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.10%)</title><rect x="1180.1" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.10%)</title><rect x="1180.1" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.10%)</title><rect x="1180.1" y="259.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1183.1" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (23 samples, 0.74%)</title><rect x="1181.2" y="403.0" width="8.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
</g>
</svg>
