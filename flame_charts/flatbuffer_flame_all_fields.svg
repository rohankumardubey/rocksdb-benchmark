<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (2,970 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.03%)</title><rect x="10.0" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>[unknown_Java] (11 samples, 0.37%)</title><rect x="10.4" y="483.0" width="4.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.4" y="494.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/Query.main (2,872 samples, 96.70%)</title><rect x="14.8" y="483.0" width="1141.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.8" y="494.0">com/sodonnell/rocksdb/Query.main</text>
</g>
<g>
<title>com/sodonnell/rocksdb/Query.queryForType (2,872 samples, 96.70%)</title><rect x="14.8" y="467.0" width="1141.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.8" y="478.0">com/sodonnell/rocksdb/Query.queryForType</text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryData.walkRandom (2,872 samples, 96.70%)</title><rect x="14.8" y="451.0" width="1141.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.8" y="462.0">com/sodonnell/rocksdb/QueryData.walkRandom</text>
</g>
<g>
<title>com/sodonnell/rocksdb/ByteUtils.dirBytes (90 samples, 3.03%)</title><rect x="14.8" y="435.0" width="35.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="446.0">com..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/ByteUtils.longToBytes (15 samples, 0.51%)</title><rect x="14.8" y="419.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.8" y="430.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.03%)</title><rect x="19.1" y="403.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.1" y="414.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryDataFlatBuffer.findNextId (1 samples, 0.03%)</title><rect x="19.5" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.5" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="19.9" y="403.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="22.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (75 samples, 2.53%)</title><rect x="20.7" y="419.0" width="29.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.7" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (64 samples, 2.15%)</title><rect x="23.9" y="403.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.9" y="414.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding$StringEncoder.encode (58 samples, 1.95%)</title><rect x="26.3" y="387.0" width="23.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.3" y="398.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.10%)</title><rect x="49.3" y="403.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="52.3" y="414.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryDataFlatBuffer.findNextId (230 samples, 7.74%)</title><rect x="50.5" y="435.0" width="91.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="53.5" y="446.0">com/sodonne..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/flatbuffer/Acl.name (114 samples, 3.84%)</title><rect x="58.9" y="419.0" width="45.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.9" y="430.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (114 samples, 3.84%)</title><rect x="58.9" y="403.0" width="45.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.9" y="414.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (114 samples, 3.84%)</title><rect x="58.9" y="387.0" width="45.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.9" y="398.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8 (114 samples, 3.84%)</title><rect x="58.9" y="371.0" width="45.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.9" y="382.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8Array (37 samples, 1.25%)</title><rect x="89.5" y="355.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.5" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.17%)</title><rect x="102.2" y="339.0" width="2.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="105.2" y="350.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/flatbuffer/Acl.scope (10 samples, 0.34%)</title><rect x="104.2" y="419.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.2" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.34%)</title><rect x="104.2" y="403.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.2" y="414.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8Array (3 samples, 0.10%)</title><rect x="106.9" y="387.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.9" y="398.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/flatbuffer/DirectoryInfo.group (30 samples, 1.01%)</title><rect x="108.1" y="419.0" width="12.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.1" y="430.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (30 samples, 1.01%)</title><rect x="108.1" y="403.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.1" y="414.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (30 samples, 1.01%)</title><rect x="108.1" y="387.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.1" y="398.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8 (30 samples, 1.01%)</title><rect x="108.1" y="371.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.1" y="382.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8Array (23 samples, 0.77%)</title><rect x="110.9" y="355.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.9" y="366.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/flatbuffer/DirectoryInfo.name (27 samples, 0.91%)</title><rect x="120.1" y="419.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.1" y="430.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (27 samples, 0.91%)</title><rect x="120.1" y="403.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.1" y="414.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (27 samples, 0.91%)</title><rect x="120.1" y="387.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.1" y="398.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8 (27 samples, 0.91%)</title><rect x="120.1" y="371.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.1" y="382.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8Array (15 samples, 0.51%)</title><rect x="124.8" y="355.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.8" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.10%)</title><rect x="129.6" y="339.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="132.6" y="350.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/flatbuffer/DirectoryInfo.owner (28 samples, 0.94%)</title><rect x="130.8" y="419.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.8" y="430.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (28 samples, 0.94%)</title><rect x="130.8" y="403.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.8" y="414.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Table.__string (28 samples, 0.94%)</title><rect x="130.8" y="387.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.8" y="398.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8 (28 samples, 0.94%)</title><rect x="130.8" y="371.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="133.8" y="382.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.decodeUtf8Array (18 samples, 0.61%)</title><rect x="134.8" y="355.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.8" y="366.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8$DecodeUtil.isOneByte (1 samples, 0.03%)</title><rect x="141.1" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.1" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="141.1" y="323.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="144.1" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="141.1" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="144.1" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="141.1" y="291.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="144.1" y="302.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="141.1" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="144.1" y="286.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.03%)</title><rect x="141.1" y="259.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="144.1" y="270.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="141.1" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="144.1" y="254.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="141.1" y="227.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="144.1" y="238.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.03%)</title><rect x="141.1" y="211.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="144.1" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="141.1" y="195.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="144.1" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="141.1" y="179.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="144.1" y="190.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="141.5" y="339.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="144.5" y="350.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/RocksDBTable.find (2,550 samples, 85.86%)</title><rect x="141.9" y="435.0" width="1013.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.9" y="446.0">com/sodonnell/rocksdb/RocksDBTable.find</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,550 samples, 85.86%)</title><rect x="141.9" y="419.0" width="1013.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.9" y="430.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>java/lang/StringCoding.encode (5 samples, 0.17%)</title><rect x="145.9" y="403.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.9" y="414.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="147.9" y="403.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="150.9" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="148.3" y="403.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="151.3" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,533 samples, 85.29%)</title><rect x="148.7" y="403.0" width="1006.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.7" y="414.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (2,525 samples, 85.02%)</title><rect x="151.4" y="387.0" width="1003.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="154.4" y="398.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="152.2" y="371.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="155.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.13%)</title><rect x="152.6" y="371.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="155.6" y="382.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2,510 samples, 84.51%)</title><rect x="154.2" y="371.0" width="997.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="157.2" y="382.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int)</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="155.8" y="355.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="158.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="156.2" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="159.2" y="366.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (108 samples, 3.64%)</title><rect x="156.6" y="355.0" width="42.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="159.6" y="366.0">Java..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="158.6" y="339.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="161.6" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="159.0" y="339.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="162.0" y="350.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.03%)</title><rect x="159.4" y="339.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="162.4" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="159.8" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="162.8" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.13%)</title><rect x="160.2" y="339.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="163.2" y="350.0"></text>
</g>
<g>
<title>YieldingFlexibleGangWorker::~YieldingFlexibleGangWorker() (1 samples, 0.03%)</title><rect x="161.8" y="339.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="164.8" y="350.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.07%)</title><rect x="162.2" y="339.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="165.2" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (10 samples, 0.34%)</title><rect x="163.0" y="339.0" width="3.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="166.0" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.10%)</title><rect x="163.0" y="323.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="166.0" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (7 samples, 0.24%)</title><rect x="164.2" y="323.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="167.2" y="334.0"></text>
</g>
<g>
<title>jni_NewByteArray (61 samples, 2.05%)</title><rect x="166.9" y="339.0" width="24.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="169.9" y="350.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.17%)</title><rect x="168.1" y="323.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="171.1" y="334.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (6 samples, 0.20%)</title><rect x="170.1" y="323.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="173.1" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.07%)</title><rect x="172.5" y="323.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="175.5" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 0.40%)</title><rect x="173.3" y="323.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="176.3" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (7 samples, 0.24%)</title><rect x="178.1" y="323.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="181.1" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (26 samples, 0.88%)</title><rect x="180.8" y="323.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="183.8" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (22 samples, 0.74%)</title><rect x="182.0" y="307.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="185.0" y="318.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.13%)</title><rect x="188.0" y="291.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="191.0" y="302.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (3 samples, 0.10%)</title><rect x="189.6" y="291.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="192.6" y="302.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.03%)</title><rect x="190.8" y="307.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="193.8" y="318.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (21 samples, 0.71%)</title><rect x="191.2" y="339.0" width="8.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="194.2" y="350.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.10%)</title><rect x="191.6" y="323.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="194.6" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.24%)</title><rect x="192.8" y="323.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="195.8" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (7 samples, 0.24%)</title><rect x="195.5" y="323.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="198.5" y="334.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.10%)</title><rect x="198.3" y="323.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="201.3" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.03%)</title><rect x="199.5" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="202.5" y="366.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.07%)</title><rect x="199.9" y="355.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="202.9" y="366.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (5 samples, 0.17%)</title><rect x="200.7" y="355.0" width="2.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="203.7" y="366.0"></text>
</g>
<g>
<title>free (22 samples, 0.74%)</title><rect x="202.7" y="355.0" width="8.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="205.7" y="366.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.07%)</title><rect x="205.5" y="339.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="208.5" y="350.0"></text>
</g>
<g>
<title>tiny_size (13 samples, 0.44%)</title><rect x="206.3" y="339.0" width="5.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="209.3" y="350.0"></text>
</g>
<g>
<title>free_tiny (68 samples, 2.29%)</title><rect x="211.4" y="355.0" width="27.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="214.4" y="366.0">f..</text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.07%)</title><rect x="224.5" y="339.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="227.5" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="225.3" y="339.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="228.3" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (32 samples, 1.08%)</title><rect x="225.7" y="339.0" width="12.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="228.7" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (14 samples, 0.47%)</title><rect x="232.9" y="323.0" width="5.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="235.9" y="334.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (16 samples, 0.54%)</title><rect x="238.5" y="355.0" width="6.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="241.5" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.13%)</title><rect x="239.2" y="339.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="242.2" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.13%)</title><rect x="240.8" y="339.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="243.8" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (6 samples, 0.20%)</title><rect x="242.4" y="339.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="245.4" y="350.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (27 samples, 0.91%)</title><rect x="244.8" y="355.0" width="10.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="247.8" y="366.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.07%)</title><rect x="247.2" y="339.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="250.2" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.20%)</title><rect x="248.0" y="339.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="251.0" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (8 samples, 0.27%)</title><rect x="250.4" y="339.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="253.4" y="350.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.17%)</title><rect x="253.5" y="339.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="256.5" y="350.0"></text>
</g>
<g>
<title>jni_NewByteArray (7 samples, 0.24%)</title><rect x="255.5" y="355.0" width="2.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="258.5" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.07%)</title><rect x="258.3" y="355.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="261.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,181 samples, 73.43%)</title><rect x="259.1" y="355.0" width="866.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="262.1" y="366.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,175 samples, 73.23%)</title><rect x="261.5" y="339.0" width="864.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="264.5" y="350.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__..</text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (2 samples, 0.07%)</title><rect x="264.3" y="323.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="267.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (36 samples, 1.21%)</title><rect x="265.1" y="323.0" width="14.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="268.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (18 samples, 0.61%)</title><rect x="265.1" y="307.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="268.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (16 samples, 0.54%)</title><rect x="272.2" y="307.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="275.2" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.13%)</title><rect x="273.0" y="291.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="276.0" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.30%)</title><rect x="274.6" y="291.0" width="3.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="277.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="278.2" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="281.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.07%)</title><rect x="278.6" y="307.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="281.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2,077 samples, 69.93%)</title><rect x="279.4" y="323.0" width="825.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="282.4" y="334.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Pin..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.17%)</title><rect x="285.7" y="307.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="288.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.07%)</title><rect x="287.7" y="307.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="290.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (2,036 samples, 68.55%)</title><rect x="288.5" y="307.0" width="808.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="291.5" y="318.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions)</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.17%)</title><rect x="296.9" y="291.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="299.9" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="298.8" y="291.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="301.8" y="302.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="299.2" y="291.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="302.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (5 samples, 0.17%)</title><rect x="299.6" y="291.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="302.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.03%)</title><rect x="301.6" y="291.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="304.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.07%)</title><rect x="302.0" y="291.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="305.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (13 samples, 0.44%)</title><rect x="302.8" y="291.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="305.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (11 samples, 0.37%)</title><rect x="303.6" y="275.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="306.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (17 samples, 0.57%)</title><rect x="308.0" y="291.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="311.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.07%)</title><rect x="308.4" y="275.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="311.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="308.8" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="311.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (13 samples, 0.44%)</title><rect x="309.2" y="275.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="312.2" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="313.1" y="259.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="316.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.07%)</title><rect x="313.5" y="259.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="316.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="314.3" y="275.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="317.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="314.7" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="317.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::Env::Default() (48 samples, 1.62%)</title><rect x="315.1" y="291.0" width="19.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="318.1" y="302.0"></text>
</g>
<g>
<title>gettimeofday (42 samples, 1.41%)</title><rect x="315.9" y="275.0" width="16.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="318.9" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (38 samples, 1.28%)</title><rect x="317.5" y="259.0" width="15.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="320.5" y="270.0"></text>
</g>
<g>
<title>_res (33 samples, 1.11%)</title><rect x="319.5" y="243.0" width="13.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="322.5" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.13%)</title><rect x="332.6" y="275.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="335.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (1 samples, 0.03%)</title><rect x="334.2" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="337.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.07%)</title><rect x="334.6" y="291.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="337.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::HistogramImpl::Add(unsigned long long) (29 samples, 0.98%)</title><rect x="335.4" y="291.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="338.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (2 samples, 0.07%)</title><rect x="346.9" y="291.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="349.9" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="346.9" y="275.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="349.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.10%)</title><rect x="347.7" y="291.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="350.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="348.9" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="351.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (1 samples, 0.03%)</title><rect x="349.3" y="291.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="352.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long long) (18 samples, 0.61%)</title><rect x="349.7" y="291.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="352.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (18 samples, 0.61%)</title><rect x="356.8" y="291.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (1,622 samples, 54.61%)</title><rect x="364.0" y="291.0" width="644.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="367.0" y="302.0">rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::Pin..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (1 samples, 0.03%)</title><rect x="372.3" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="375.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.07%)</title><rect x="372.7" y="275.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="375.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.03%)</title><rect x="373.5" y="275.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="376.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (6 samples, 0.20%)</title><rect x="373.9" y="275.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="376.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (19 samples, 0.64%)</title><rect x="376.3" y="275.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="379.3" y="286.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (17 samples, 0.57%)</title><rect x="377.1" y="259.0" width="6.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="380.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetContext::ReportCounters() (210 samples, 7.07%)</title><rect x="383.9" y="275.0" width="83.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="386.9" y="286.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (39 samples, 1.31%)</title><rect x="385.5" y="259.0" width="15.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="388.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (167 samples, 5.62%)</title><rect x="400.9" y="259.0" width="66.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="403.9" y="270.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="467.3" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="470.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (2 samples, 0.07%)</title><rect x="467.7" y="275.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="470.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.10%)</title><rect x="468.5" y="275.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="471.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (9 samples, 0.30%)</title><rect x="469.7" y="275.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="472.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int) (1,223 samples, 41.18%)</title><rect x="473.3" y="275.0" width="485.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="476.3" y="286.0">rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::Inte..</text>
</g>
<g>
<title>free (2 samples, 0.07%)</title><rect x="478.8" y="259.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="481.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.07%)</title><rect x="479.6" y="259.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (1,194 samples, 40.20%)</title><rect x="480.4" y="259.0" width="474.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="483.4" y="270.0">rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="499.9" y="243.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="502.9" y="254.0"></text>
</g>
<g>
<title>free (11 samples, 0.37%)</title><rect x="500.3" y="243.0" width="4.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="503.3" y="254.0"></text>
</g>
<g>
<title>tiny_size (7 samples, 0.24%)</title><rect x="501.9" y="227.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="504.9" y="238.0"></text>
</g>
<g>
<title>free_tiny (13 samples, 0.44%)</title><rect x="504.6" y="243.0" width="5.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="507.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (17 samples, 0.57%)</title><rect x="509.8" y="243.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="512.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (7 samples, 0.24%)</title><rect x="511.4" y="227.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="514.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (6 samples, 0.20%)</title><rect x="514.2" y="227.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="517.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (1 samples, 0.03%)</title><rect x="516.6" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="519.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (1 samples, 0.03%)</title><rect x="517.0" y="243.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="520.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (3 samples, 0.10%)</title><rect x="517.4" y="243.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="520.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::TryReadPropertiesWithGlobalSeqno(rocksdb::FilePrefetchBuffer*, rocksdb::Slice const&amp;, rocksdb::TableProperties**) (239 samples, 8.05%)</title><rect x="518.6" y="243.0" width="94.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="521.6" y="254.0">rocksdb::Bl..</text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (18 samples, 0.61%)</title><rect x="522.9" y="227.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="525.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (1 samples, 0.03%)</title><rect x="530.1" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (1 samples, 0.03%)</title><rect x="530.5" y="227.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="533.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (207 samples, 6.97%)</title><rect x="530.9" y="227.0" width="82.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="533.9" y="238.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::Env::Default() (1 samples, 0.03%)</title><rect x="532.1" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="535.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (199 samples, 6.70%)</title><rect x="532.5" y="211.0" width="79.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="535.5" y="222.0">rocksdb::..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="537.6" y="195.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="540.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (19 samples, 0.64%)</title><rect x="538.0" y="195.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="541.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (1 samples, 0.03%)</title><rect x="538.0" y="179.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="541.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(unsigned long long, unsigned long, rocksdb::Slice*, char*, bool) const (14 samples, 0.47%)</title><rect x="538.4" y="179.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="541.4" y="190.0"></text>
</g>
<g>
<title>pread (13 samples, 0.44%)</title><rect x="538.4" y="163.0" width="5.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="541.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (1 samples, 0.03%)</title><rect x="543.6" y="163.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="546.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (4 samples, 0.13%)</title><rect x="544.0" y="179.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="547.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (4 samples, 0.13%)</title><rect x="544.0" y="163.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="547.0" y="174.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (4 samples, 0.13%)</title><rect x="544.0" y="147.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="547.0" y="158.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (4 samples, 0.13%)</title><rect x="544.0" y="131.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="547.0" y="142.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (4 samples, 0.13%)</title><rect x="544.0" y="115.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="547.0" y="126.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (4 samples, 0.13%)</title><rect x="544.0" y="99.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="547.0" y="110.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (4 samples, 0.13%)</title><rect x="544.0" y="83.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="547.0" y="94.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (3 samples, 0.10%)</title><rect x="544.0" y="67.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="547.0" y="78.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (3 samples, 0.10%)</title><rect x="544.0" y="51.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="547.0" y="62.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.07%)</title><rect x="544.4" y="35.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="547.4" y="46.0"></text>
</g>
<g>
<title>snappy::SnappyDecompressor::RefillTag() (1 samples, 0.03%)</title><rect x="545.2" y="67.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="548.2" y="78.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (162 samples, 5.45%)</title><rect x="545.6" y="195.0" width="64.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="548.6" y="206.0">rocksdb..</text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (2 samples, 0.07%)</title><rect x="549.5" y="179.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="552.5" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.07%)</title><rect x="550.3" y="179.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="553.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (9 samples, 0.30%)</title><rect x="551.1" y="179.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="554.1" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.07%)</title><rect x="553.5" y="163.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="556.5" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="554.3" y="163.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="557.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (128 samples, 4.31%)</title><rect x="554.7" y="179.0" width="50.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="557.7" y="190.0">rocks..</text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.17%)</title><rect x="596.0" y="163.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="599.0" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.10%)</title><rect x="598.0" y="163.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="601.0" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (16 samples, 0.54%)</title><rect x="599.2" y="163.0" width="6.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="602.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.07%)</title><rect x="605.6" y="179.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="608.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (1 samples, 0.03%)</title><rect x="606.0" y="163.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="609.0" y="174.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="606.0" y="147.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.0" y="158.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="606.0" y="131.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="609.0" y="142.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="606.0" y="115.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="609.0" y="126.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="606.0" y="99.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="609.0" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="606.0" y="83.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="609.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (7 samples, 0.24%)</title><rect x="606.4" y="179.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="609.4" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="609.1" y="179.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="612.1" y="190.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="609.5" y="179.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="612.5" y="190.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="609.5" y="163.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="612.5" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="609.5" y="147.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="612.5" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="609.5" y="131.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="612.5" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="609.5" y="115.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="612.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::Value(rocksdb::Cache::Handle*) (3 samples, 0.10%)</title><rect x="609.9" y="195.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="612.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (1 samples, 0.03%)</title><rect x="611.1" y="195.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="614.1" y="206.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (4 samples, 0.13%)</title><rect x="611.5" y="211.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="614.5" y="222.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="613.1" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="616.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (19 samples, 0.64%)</title><rect x="613.5" y="243.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (7 samples, 0.24%)</title><rect x="616.3" y="227.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="619.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (4 samples, 0.13%)</title><rect x="617.5" y="211.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="620.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (5 samples, 0.17%)</title><rect x="619.1" y="227.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="622.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (3 samples, 0.10%)</title><rect x="621.1" y="243.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="624.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (1 samples, 0.03%)</title><rect x="621.1" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="624.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.03%)</title><rect x="621.5" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.5" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="621.5" y="211.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="624.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="621.9" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="624.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (1 samples, 0.03%)</title><rect x="622.2" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="625.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (375 samples, 12.63%)</title><rect x="622.6" y="243.0" width="149.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="625.6" y="254.0">rocksdb::DataBlockI..</text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.24%)</title><rect x="668.3" y="227.0" width="2.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="671.3" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="671.1" y="227.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="674.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (177 samples, 5.96%)</title><rect x="671.9" y="227.0" width="70.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="674.9" y="238.0">rocksdb:..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (25 samples, 0.84%)</title><rect x="714.8" y="211.0" width="10.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="717.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (43 samples, 1.45%)</title><rect x="724.8" y="211.0" width="17.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.8" y="222.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (41 samples, 1.38%)</title><rect x="725.5" y="195.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="728.5" y="206.0"></text>
</g>
<g>
<title>malloc (40 samples, 1.35%)</title><rect x="725.9" y="179.0" width="15.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="728.9" y="190.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="727.9" y="163.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="730.9" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (34 samples, 1.14%)</title><rect x="728.3" y="163.0" width="13.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="731.3" y="174.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.10%)</title><rect x="729.9" y="147.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="732.9" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (27 samples, 0.91%)</title><rect x="731.1" y="147.0" width="10.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="734.1" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (27 samples, 0.91%)</title><rect x="731.1" y="131.0" width="10.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="734.1" y="142.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (2 samples, 0.07%)</title><rect x="737.9" y="115.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="740.9" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (8 samples, 0.27%)</title><rect x="738.7" y="115.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="741.7" y="126.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="741.8" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="744.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.07%)</title><rect x="742.2" y="227.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="745.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::GetVarint32PtrFallback(char const*, char const*, unsigned int*) (8 samples, 0.27%)</title><rect x="743.0" y="227.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="746.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (63 samples, 2.12%)</title><rect x="746.2" y="227.0" width="25.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="749.2" y="238.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.13%)</title><rect x="755.3" y="211.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="758.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (34 samples, 1.14%)</title><rect x="756.9" y="211.0" width="13.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="759.9" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (22 samples, 0.74%)</title><rect x="761.7" y="195.0" width="8.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="764.7" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.07%)</title><rect x="770.4" y="211.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="773.4" y="222.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="771.2" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (14 samples, 0.47%)</title><rect x="771.6" y="243.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::DelegateCleanupsTo(rocksdb::Cleanable*) (1 samples, 0.03%)</title><rect x="774.0" y="227.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.24%)</title><rect x="774.4" y="227.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="777.4" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.17%)</title><rect x="775.2" y="211.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="778.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (2 samples, 0.07%)</title><rect x="777.2" y="243.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="780.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (435 samples, 14.65%)</title><rect x="778.0" y="243.0" width="172.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="781.0" y="254.0">rocksdb::IndexBlockIte..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.20%)</title><rect x="885.7" y="227.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="888.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (9 samples, 0.30%)</title><rect x="888.0" y="227.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="891.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (144 samples, 4.85%)</title><rect x="891.6" y="227.0" width="57.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="894.6" y="238.0">rocksd..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.07%)</title><rect x="904.7" y="211.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="907.7" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (9 samples, 0.30%)</title><rect x="905.5" y="211.0" width="3.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="908.5" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.17%)</title><rect x="909.1" y="211.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="912.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (83 samples, 2.79%)</title><rect x="911.1" y="211.0" width="33.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="914.1" y="222.0">ro..</text>
</g>
<g>
<title>_platform_memcmp (60 samples, 2.02%)</title><rect x="920.2" y="195.0" width="23.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="923.2" y="206.0">_..</text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (12 samples, 0.40%)</title><rect x="944.1" y="211.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="947.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="948.8" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="951.8" y="238.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.13%)</title><rect x="949.2" y="227.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (1 samples, 0.03%)</title><rect x="950.8" y="243.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="953.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (5 samples, 0.17%)</title><rect x="951.2" y="243.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="953.2" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.2" y="254.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="953.6" y="243.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="956.6" y="254.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.07%)</title><rect x="954.0" y="243.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (3 samples, 0.10%)</title><rect x="954.8" y="259.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="957.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (1 samples, 0.03%)</title><rect x="956.0" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="959.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="956.4" y="259.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="959.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="956.8" y="259.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.8" y="270.0"></text>
</g>
<g>
<title>szone_free_definite_size (2 samples, 0.07%)</title><rect x="957.2" y="259.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="960.2" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (2 samples, 0.07%)</title><rect x="958.0" y="259.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.0" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;wchar_t, std::__1::istreambuf_iterator&lt;wchar_t, std::__1::char_traits&lt;wchar_t&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="958.8" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (85 samples, 2.86%)</title><rect x="959.2" y="275.0" width="33.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.2" y="286.0">ro..</text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="962.7" y="259.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="965.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="963.1" y="259.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (56 samples, 1.89%)</title><rect x="963.5" y="259.0" width="22.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.5" y="270.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.07%)</title><rect x="966.3" y="243.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="969.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (42 samples, 1.41%)</title><rect x="967.1" y="243.0" width="16.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.1" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.13%)</title><rect x="973.1" y="227.0" width="1.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="976.1" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="974.7" y="227.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="977.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (18 samples, 0.61%)</title><rect x="975.1" y="227.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.1" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (8 samples, 0.27%)</title><rect x="979.0" y="211.0" width="3.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="982.0" y="222.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.13%)</title><rect x="982.2" y="227.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.13%)</title><rect x="983.8" y="243.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.8" y="254.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="985.4" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (18 samples, 0.61%)</title><rect x="985.8" y="259.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.8" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (10 samples, 0.34%)</title><rect x="989.0" y="243.0" width="3.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="992.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (39 samples, 1.31%)</title><rect x="992.9" y="275.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (223 samples, 7.51%)</title><rect x="1008.4" y="291.0" width="88.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.4" y="302.0">rocksdb::p..</text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="1097.0" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::Env::Default() (2 samples, 0.07%)</title><rect x="1097.4" y="307.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (5 samples, 0.17%)</title><rect x="1098.2" y="307.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (1 samples, 0.03%)</title><rect x="1100.2" y="307.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.03%)</title><rect x="1100.6" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="1101.0" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long long) (1 samples, 0.03%)</title><rect x="1101.4" y="307.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (3 samples, 0.10%)</title><rect x="1101.8" y="307.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::StatisticsJni::HistEnabledForType(unsigned int) const (1 samples, 0.03%)</title><rect x="1103.0" y="307.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.0" y="318.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.10%)</title><rect x="1103.4" y="307.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.4" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (53 samples, 1.78%)</title><rect x="1104.6" y="323.0" width="21.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.6" y="334.0">s..</text>
</g>
<g>
<title>_setcontext (1 samples, 0.03%)</title><rect x="1106.2" y="307.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1109.2" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (42 samples, 1.41%)</title><rect x="1106.6" y="307.0" width="16.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.6" y="318.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (15 samples, 0.51%)</title><rect x="1109.3" y="291.0" width="6.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1112.3" y="302.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.07%)</title><rect x="1115.3" y="291.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1118.3" y="302.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (18 samples, 0.61%)</title><rect x="1116.1" y="291.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.1" y="302.0"></text>
</g>
<g>
<title>malloc (18 samples, 0.61%)</title><rect x="1116.1" y="275.0" width="7.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1119.1" y="286.0"></text>
</g>
<g>
<title>malloc_zone_malloc (18 samples, 0.61%)</title><rect x="1116.1" y="259.0" width="7.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1119.1" y="270.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.07%)</title><rect x="1116.1" y="243.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1119.1" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (16 samples, 0.54%)</title><rect x="1116.9" y="243.0" width="6.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1119.9" y="254.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (14 samples, 0.47%)</title><rect x="1117.7" y="227.0" width="5.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1120.7" y="238.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (2 samples, 0.07%)</title><rect x="1121.3" y="211.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1124.3" y="222.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1122.1" y="211.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1125.1" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.07%)</title><rect x="1122.5" y="211.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1125.5" y="222.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (3 samples, 0.10%)</title><rect x="1123.3" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.3" y="318.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="1124.4" y="307.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.07%)</title><rect x="1125.6" y="355.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.6" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (34 samples, 1.14%)</title><rect x="1126.4" y="355.0" width="13.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.4" y="366.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.07%)</title><rect x="1126.4" y="339.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1129.4" y="350.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (32 samples, 1.08%)</title><rect x="1127.2" y="339.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="350.0"></text>
</g>
<g>
<title>malloc (32 samples, 1.08%)</title><rect x="1127.2" y="323.0" width="12.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1130.2" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (31 samples, 1.04%)</title><rect x="1127.6" y="307.0" width="12.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1130.6" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (29 samples, 0.98%)</title><rect x="1128.4" y="291.0" width="11.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1131.4" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1129.2" y="275.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1132.2" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (26 samples, 0.88%)</title><rect x="1129.6" y="275.0" width="10.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1132.6" y="286.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (3 samples, 0.10%)</title><rect x="1137.6" y="259.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1140.6" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.10%)</title><rect x="1138.7" y="259.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1141.7" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (29 samples, 0.98%)</title><rect x="1139.9" y="355.0" width="11.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.9" y="366.0"></text>
</g>
<g>
<title>malloc (29 samples, 0.98%)</title><rect x="1139.9" y="339.0" width="11.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1142.9" y="350.0"></text>
</g>
<g>
<title>malloc_zone_malloc (29 samples, 0.98%)</title><rect x="1139.9" y="323.0" width="11.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1142.9" y="334.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (26 samples, 0.88%)</title><rect x="1141.1" y="307.0" width="10.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1144.1" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (25 samples, 0.84%)</title><rect x="1141.5" y="291.0" width="10.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1144.5" y="302.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (1 samples, 0.03%)</title><rect x="1151.5" y="371.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="382.0"></text>
</g>
<g>
<title>vtable for std::__1::messages&lt;char&gt; (4 samples, 0.13%)</title><rect x="1151.9" y="371.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="382.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.07%)</title><rect x="1153.4" y="371.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.4" y="382.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;wchar_t, std::__1::istreambuf_iterator&lt;wchar_t, std::__1::char_traits&lt;wchar_t&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="1154.2" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (1 samples, 0.03%)</title><rect x="1154.6" y="387.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.6" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2 samples, 0.07%)</title><rect x="1155.0" y="435.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>thread_start (69 samples, 2.32%)</title><rect x="1155.8" y="483.0" width="27.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1158.8" y="494.0">t..</text>
</g>
<g>
<title>_pthread_start (69 samples, 2.32%)</title><rect x="1155.8" y="467.0" width="27.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1158.8" y="478.0">_..</text>
</g>
<g>
<title>_pthread_body (69 samples, 2.32%)</title><rect x="1155.8" y="451.0" width="27.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1158.8" y="462.0">_..</text>
</g>
<g>
<title>java_start(Thread*) (69 samples, 2.32%)</title><rect x="1155.8" y="435.0" width="27.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1158.8" y="446.0">j..</text>
</g>
<g>
<title>GCTaskThread::run() (48 samples, 1.62%)</title><rect x="1155.8" y="419.0" width="19.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.8" y="430.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (27 samples, 0.91%)</title><rect x="1155.8" y="403.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.8" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (27 samples, 0.91%)</title><rect x="1155.8" y="387.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.8" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (27 samples, 0.91%)</title><rect x="1155.8" y="371.0" width="10.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="382.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (27 samples, 0.91%)</title><rect x="1155.8" y="355.0" width="10.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1158.8" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (27 samples, 0.91%)</title><rect x="1155.8" y="339.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.8" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (25 samples, 0.84%)</title><rect x="1155.8" y="323.0" width="10.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1158.8" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1165.8" y="323.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1168.8" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1166.2" y="323.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1169.2" y="334.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (2 samples, 0.07%)</title><rect x="1166.6" y="403.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="414.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.03%)</title><rect x="1166.6" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.6" y="398.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (1 samples, 0.03%)</title><rect x="1166.6" y="371.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.6" y="382.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (1 samples, 0.03%)</title><rect x="1166.6" y="355.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.6" y="366.0"></text>
</g>
<g>
<title>SystemDictionary::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1167.0" y="387.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.0" y="398.0"></text>
</g>
<g>
<title>ProtectionDomainCacheTable::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1167.0" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.0" y="382.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (9 samples, 0.30%)</title><rect x="1167.4" y="403.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.4" y="414.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.30%)</title><rect x="1167.4" y="387.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1170.4" y="398.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (8 samples, 0.27%)</title><rect x="1170.9" y="403.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.9" y="414.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (8 samples, 0.27%)</title><rect x="1170.9" y="387.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.9" y="398.0"></text>
</g>
<g>
<title>CodeBlobToOopClosure::do_nmethod(nmethod*) (4 samples, 0.13%)</title><rect x="1170.9" y="371.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="382.0"></text>
</g>
<g>
<title>RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) (1 samples, 0.03%)</title><rect x="1170.9" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="366.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (3 samples, 0.10%)</title><rect x="1171.3" y="355.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="366.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="1171.7" y="339.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="350.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.03%)</title><rect x="1172.1" y="339.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.1" y="350.0"></text>
</g>
<g>
<title>MarkingCodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.03%)</title><rect x="1172.5" y="371.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="382.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (1 samples, 0.03%)</title><rect x="1172.5" y="355.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="366.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.03%)</title><rect x="1172.9" y="371.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="382.0"></text>
</g>
<g>
<title>InterpreterOopMap::iterate_oop(OffsetClosure*) const (1 samples, 0.03%)</title><rect x="1172.9" y="355.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.9" y="366.0"></text>
</g>
<g>
<title>void PSRootsClosure&lt;false&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="1172.9" y="339.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="350.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 0.07%)</title><rect x="1173.3" y="371.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.3" y="382.0"></text>
</g>
<g>
<title>RelocIterator::next() (2 samples, 0.07%)</title><rect x="1173.3" y="355.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="366.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (2 samples, 0.07%)</title><rect x="1174.1" y="403.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.1" y="414.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.1" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="398.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1174.1" y="371.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.1" y="382.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1174.1" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="366.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.03%)</title><rect x="1174.1" y="339.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1174.1" y="323.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1174.1" y="307.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1177.1" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1174.1" y="291.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1177.1" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1174.1" y="275.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1177.1" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="1174.5" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1174.5" y="371.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1177.5" y="382.0"></text>
</g>
<g>
<title>VMThread::run() (14 samples, 0.47%)</title><rect x="1174.9" y="419.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>VMThread::loop() (14 samples, 0.47%)</title><rect x="1174.9" y="403.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="414.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="1174.9" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="398.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="1174.9" y="371.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1177.9" y="382.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (13 samples, 0.44%)</title><rect x="1175.3" y="387.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="398.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (13 samples, 0.44%)</title><rect x="1175.3" y="371.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="382.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (13 samples, 0.44%)</title><rect x="1175.3" y="355.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="366.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (13 samples, 0.44%)</title><rect x="1175.3" y="339.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="350.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (13 samples, 0.44%)</title><rect x="1175.3" y="323.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="334.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (13 samples, 0.44%)</title><rect x="1175.3" y="307.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="318.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.03%)</title><rect x="1175.3" y="291.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="302.0"></text>
</g>
<g>
<title>Universe::print_heap_before_gc(outputStream*, bool) (1 samples, 0.03%)</title><rect x="1175.3" y="275.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="286.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.03%)</title><rect x="1175.3" y="259.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="270.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.03%)</title><rect x="1175.3" y="243.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.3" y="254.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.03%)</title><rect x="1175.3" y="227.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1178.3" y="238.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.03%)</title><rect x="1175.3" y="211.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1178.3" y="222.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.03%)</title><rect x="1175.3" y="195.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1178.3" y="206.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.03%)</title><rect x="1175.3" y="179.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1178.3" y="190.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.03%)</title><rect x="1175.3" y="163.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1178.3" y="174.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (2 samples, 0.07%)</title><rect x="1175.7" y="291.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="302.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (2 samples, 0.07%)</title><rect x="1175.7" y="275.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.07%)</title><rect x="1175.7" y="259.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="270.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.07%)</title><rect x="1175.7" y="243.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.7" y="254.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.07%)</title><rect x="1175.7" y="227.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1178.7" y="238.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.07%)</title><rect x="1175.7" y="211.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1175.7" y="195.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1178.7" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1176.1" y="195.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1179.1" y="206.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1176.1" y="179.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1179.1" y="190.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1176.1" y="163.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1179.1" y="174.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (2 samples, 0.07%)</title><rect x="1176.5" y="291.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="302.0"></text>
</g>
<g>
<title>JNIHandleBlock::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.03%)</title><rect x="1176.5" y="275.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.5" y="286.0"></text>
</g>
<g>
<title>java_lang_ref_SoftReference::clock() (1 samples, 0.03%)</title><rect x="1176.9" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="286.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (8 samples, 0.27%)</title><rect x="1177.3" y="291.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="302.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (8 samples, 0.27%)</title><rect x="1177.3" y="275.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.3" y="286.0"></text>
</g>
<g>
<title>WatcherThread::run() (7 samples, 0.24%)</title><rect x="1180.5" y="419.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="430.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (7 samples, 0.24%)</title><rect x="1180.5" y="403.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.24%)</title><rect x="1180.5" y="387.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.24%)</title><rect x="1180.5" y="371.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.5" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.24%)</title><rect x="1180.5" y="355.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.24%)</title><rect x="1180.5" y="339.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1183.5" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (17 samples, 0.57%)</title><rect x="1183.2" y="483.0" width="6.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1186.2" y="494.0"></text>
</g>
</g>
</svg>
