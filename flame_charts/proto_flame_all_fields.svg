<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (3,141 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="403.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="387.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="371.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="355.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.03%)</title><rect x="10.0" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="10.4" y="403.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.4" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="10.4" y="387.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (2 samples, 0.06%)</title><rect x="10.4" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (2 samples, 0.06%)</title><rect x="10.4" y="355.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.4" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.06%)</title><rect x="10.4" y="339.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.4" y="350.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.03%)</title><rect x="10.8" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="334.0"></text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.38%)</title><rect x="11.1" y="403.0" width="4.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="14.1" y="414.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/Query.main (2,986 samples, 95.07%)</title><rect x="15.6" y="403.0" width="1121.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.6" y="414.0">com/sodonnell/rocksdb/Query.main</text>
</g>
<g>
<title>com/sodonnell/rocksdb/Query.queryForType (2,986 samples, 95.07%)</title><rect x="15.6" y="387.0" width="1121.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.6" y="398.0">com/sodonnell/rocksdb/Query.queryForType</text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryData.walkRandom (2,986 samples, 95.07%)</title><rect x="15.6" y="371.0" width="1121.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="382.0">com/sodonnell/rocksdb/QueryData.walkRandom</text>
</g>
<g>
<title>com/sodonnell/rocksdb/ByteUtils.dirBytes (95 samples, 3.02%)</title><rect x="15.6" y="355.0" width="35.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.6" y="366.0">com..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/ByteUtils.longToBytes (21 samples, 0.67%)</title><rect x="15.6" y="339.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.6" y="350.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryDataProto.findNextId (2 samples, 0.06%)</title><rect x="20.5" y="323.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.5" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.19%)</title><rect x="21.3" y="323.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="24.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (74 samples, 2.36%)</title><rect x="23.5" y="339.0" width="27.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.5" y="350.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (60 samples, 1.91%)</title><rect x="26.9" y="323.0" width="22.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.9" y="334.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding$StringEncoder.encode (55 samples, 1.75%)</title><rect x="28.8" y="307.0" width="20.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.8" y="318.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.16%)</title><rect x="49.4" y="323.0" width="1.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="52.4" y="334.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/QueryDataProto.findNextId (414 samples, 13.18%)</title><rect x="51.3" y="355.0" width="155.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.3" y="366.0">com/sodonnell/rocksd..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$Acl.getName (48 samples, 1.53%)</title><rect x="51.3" y="339.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.3" y="350.0"></text>
</g>
<g>
<title>com/google/protobuf/ByteString.toStringUtf8 (48 samples, 1.53%)</title><rect x="51.3" y="323.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.3" y="334.0"></text>
</g>
<g>
<title>com/google/protobuf/LiteralByteString.toString (40 samples, 1.27%)</title><rect x="54.0" y="307.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (40 samples, 1.27%)</title><rect x="54.0" y="291.0" width="15.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (40 samples, 1.27%)</title><rect x="54.0" y="275.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="57.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding$StringDecoder.decode (34 samples, 1.08%)</title><rect x="54.0" y="259.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (7 samples, 0.22%)</title><rect x="64.1" y="243.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.deref (6 samples, 0.19%)</title><rect x="66.7" y="259.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.7" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.19%)</title><rect x="66.7" y="243.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.7" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.19%)</title><rect x="66.7" y="227.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.7" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.19%)</title><rect x="66.7" y="211.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (3 samples, 0.10%)</title><rect x="67.9" y="195.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.9" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.03%)</title><rect x="69.0" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.0" y="318.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.getGroup (35 samples, 1.11%)</title><rect x="69.4" y="339.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.4" y="350.0"></text>
</g>
<g>
<title>com/google/protobuf/ByteString.toStringUtf8 (35 samples, 1.11%)</title><rect x="69.4" y="323.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.4" y="334.0"></text>
</g>
<g>
<title>com/google/protobuf/LiteralByteString.toString (30 samples, 0.96%)</title><rect x="71.2" y="307.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (27 samples, 0.86%)</title><rect x="72.4" y="291.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (27 samples, 0.86%)</title><rect x="72.4" y="275.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding$StringDecoder.decode (23 samples, 0.73%)</title><rect x="72.4" y="259.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (6 samples, 0.19%)</title><rect x="78.7" y="243.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.7" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.deref (4 samples, 0.13%)</title><rect x="81.0" y="259.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.0" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.13%)</title><rect x="81.0" y="243.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.0" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.13%)</title><rect x="81.0" y="227.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.0" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.13%)</title><rect x="81.0" y="211.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (1 samples, 0.03%)</title><rect x="82.1" y="195.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.1" y="206.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.getName (41 samples, 1.31%)</title><rect x="82.5" y="339.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.5" y="350.0"></text>
</g>
<g>
<title>com/google/protobuf/ByteString.toStringUtf8 (41 samples, 1.31%)</title><rect x="82.5" y="323.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.5" y="334.0"></text>
</g>
<g>
<title>com/google/protobuf/LiteralByteString.toString (37 samples, 1.18%)</title><rect x="84.0" y="307.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (37 samples, 1.18%)</title><rect x="84.0" y="291.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (37 samples, 1.18%)</title><rect x="84.0" y="275.0" width="13.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="87.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding$StringDecoder.decode (30 samples, 0.96%)</title><rect x="84.0" y="259.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (5 samples, 0.16%)</title><rect x="93.4" y="243.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.4" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.deref (7 samples, 0.22%)</title><rect x="95.3" y="259.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.3" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.22%)</title><rect x="95.3" y="243.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.3" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.22%)</title><rect x="95.3" y="227.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.3" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.22%)</title><rect x="95.3" y="211.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (3 samples, 0.10%)</title><rect x="96.8" y="195.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.8" y="206.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.getOwner (36 samples, 1.15%)</title><rect x="97.9" y="339.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.9" y="350.0"></text>
</g>
<g>
<title>com/google/protobuf/ByteString.toStringUtf8 (36 samples, 1.15%)</title><rect x="97.9" y="323.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="100.9" y="334.0"></text>
</g>
<g>
<title>com/google/protobuf/LiteralByteString.toString (30 samples, 0.96%)</title><rect x="100.2" y="307.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (30 samples, 0.96%)</title><rect x="100.2" y="291.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (30 samples, 0.96%)</title><rect x="100.2" y="275.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding$StringDecoder.decode (25 samples, 0.80%)</title><rect x="100.2" y="259.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (4 samples, 0.13%)</title><rect x="108.1" y="243.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.deref (5 samples, 0.16%)</title><rect x="109.6" y="259.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.6" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.16%)</title><rect x="109.6" y="243.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.6" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.16%)</title><rect x="109.6" y="227.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.6" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.16%)</title><rect x="109.6" y="211.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (4 samples, 0.13%)</title><rect x="109.9" y="195.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.9" y="206.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.parseFrom (243 samples, 7.74%)</title><rect x="111.4" y="339.0" width="91.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.4" y="350.0">com/sodonne..</text>
</g>
<g>
<title>com/google/protobuf/AbstractParser.parseFrom (243 samples, 7.74%)</title><rect x="111.4" y="323.0" width="91.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.4" y="334.0">com/google/..</text>
</g>
<g>
<title>com/google/protobuf/AbstractParser.parseFrom (243 samples, 7.74%)</title><rect x="111.4" y="307.0" width="91.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.4" y="318.0">com/google/..</text>
</g>
<g>
<title>com/google/protobuf/AbstractParser.parseFrom (243 samples, 7.74%)</title><rect x="111.4" y="291.0" width="91.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.4" y="302.0">com/google/..</text>
</g>
<g>
<title>com/google/protobuf/AbstractParser.parseFrom (243 samples, 7.74%)</title><rect x="111.4" y="275.0" width="91.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.4" y="286.0">com/google/..</text>
</g>
<g>
<title>com/google/protobuf/AbstractParser.checkMessageInitialized (13 samples, 0.41%)</title><rect x="111.4" y="259.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.4" y="270.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.isInitialized (13 samples, 0.41%)</title><rect x="111.4" y="243.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.4" y="254.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.getAcls (9 samples, 0.29%)</title><rect x="112.6" y="227.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.6" y="238.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (9 samples, 0.29%)</title><rect x="112.6" y="211.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="115.6" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (9 samples, 0.29%)</title><rect x="112.6" y="195.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.6" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (3 samples, 0.10%)</title><rect x="114.8" y="179.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.8" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.03%)</title><rect x="115.9" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.9" y="238.0"></text>
</g>
<g>
<title>com/google/protobuf/AbstractParser.parsePartialFrom (230 samples, 7.32%)</title><rect x="116.3" y="259.0" width="86.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.3" y="270.0">com/google..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo$1.parsePartialFrom (230 samples, 7.32%)</title><rect x="116.3" y="243.0" width="86.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.3" y="254.0">com/sodonn..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo$1.parsePartialFrom (230 samples, 7.32%)</title><rect x="116.3" y="227.0" width="86.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.3" y="238.0">com/sodonn..</text>
</g>
<g>
<title>com/google/protobuf/LiteralByteString.toString (1 samples, 0.03%)</title><rect x="118.2" y="211.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.2" y="222.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.&lt;init&gt; (224 samples, 7.13%)</title><rect x="118.6" y="211.0" width="84.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.6" y="222.0">com/sodonn..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$DirectoryInfo.&lt;init&gt; (209 samples, 6.65%)</title><rect x="124.2" y="195.0" width="78.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.2" y="206.0">com/sodon..</text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readBytes (34 samples, 1.08%)</title><rect x="126.5" y="179.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.5" y="190.0"></text>
</g>
<g>
<title>com/google/protobuf/ByteString.copyFrom (34 samples, 1.08%)</title><rect x="126.5" y="163.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.5" y="174.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="137.4" y="147.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="140.4" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.13%)</title><rect x="137.7" y="147.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="140.7" y="158.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readInt32 (2 samples, 0.06%)</title><rect x="139.2" y="179.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.2" y="190.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawVarint32 (2 samples, 0.06%)</title><rect x="139.2" y="163.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="142.2" y="174.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawByte (2 samples, 0.06%)</title><rect x="139.2" y="147.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.2" y="158.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readMessage (99 samples, 3.15%)</title><rect x="140.0" y="179.0" width="37.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.0" y="190.0">com..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$Acl$1.parsePartialFrom (99 samples, 3.15%)</title><rect x="140.0" y="163.0" width="37.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.0" y="174.0">com..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$Acl$1.parsePartialFrom (99 samples, 3.15%)</title><rect x="140.0" y="147.0" width="37.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="143.0" y="158.0">com..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$Acl.&lt;init&gt; (73 samples, 2.32%)</title><rect x="149.8" y="131.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.8" y="142.0">c..</text>
</g>
<g>
<title>com/sodonnell/rocksdb/proto/DirectoryInfoProtos$Acl.&lt;init&gt; (71 samples, 2.26%)</title><rect x="150.5" y="115.0" width="26.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.5" y="126.0">c..</text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readBytes (22 samples, 0.70%)</title><rect x="153.9" y="99.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.9" y="110.0"></text>
</g>
<g>
<title>com/google/protobuf/ByteString.copyFrom (22 samples, 0.70%)</title><rect x="153.9" y="83.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.9" y="94.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.13%)</title><rect x="160.6" y="67.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="163.6" y="78.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readEnum (4 samples, 0.13%)</title><rect x="162.1" y="99.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.1" y="110.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawVarint32 (4 samples, 0.13%)</title><rect x="162.1" y="83.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.1" y="94.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawByte (4 samples, 0.13%)</title><rect x="162.1" y="67.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="165.1" y="78.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readInt32 (3 samples, 0.10%)</title><rect x="163.7" y="99.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="166.7" y="110.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawVarint32 (3 samples, 0.10%)</title><rect x="163.7" y="83.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.7" y="94.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawByte (3 samples, 0.10%)</title><rect x="163.7" y="67.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.7" y="78.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readTag (14 samples, 0.45%)</title><rect x="164.8" y="99.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.8" y="110.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.isAtEnd (12 samples, 0.38%)</title><rect x="164.8" y="83.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.8" y="94.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.refillBuffer (12 samples, 0.38%)</title><rect x="164.8" y="67.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.8" y="78.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawVarint32 (2 samples, 0.06%)</title><rect x="169.3" y="83.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.3" y="94.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawByte (2 samples, 0.06%)</title><rect x="169.3" y="67.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.3" y="78.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet$Builder.build (17 samples, 0.54%)</title><rect x="170.0" y="99.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.0" y="110.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet.newBuilder (2 samples, 0.06%)</title><rect x="176.4" y="99.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.4" y="110.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet$Builder.access$000 (2 samples, 0.06%)</title><rect x="176.4" y="83.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.4" y="94.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet$Builder.create (2 samples, 0.06%)</title><rect x="176.4" y="67.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.4" y="78.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readTag (31 samples, 0.99%)</title><rect x="177.2" y="179.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.2" y="190.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.isAtEnd (31 samples, 0.99%)</title><rect x="177.2" y="163.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.2" y="174.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.refillBuffer (31 samples, 0.99%)</title><rect x="177.2" y="147.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.2" y="158.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readUInt64 (28 samples, 0.89%)</title><rect x="188.8" y="179.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.8" y="190.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawVarint64 (28 samples, 0.89%)</title><rect x="188.8" y="163.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.8" y="174.0"></text>
</g>
<g>
<title>com/google/protobuf/CodedInputStream.readRawByte (28 samples, 0.89%)</title><rect x="188.8" y="147.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="191.8" y="158.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet$Builder.build (2 samples, 0.06%)</title><rect x="199.3" y="179.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.3" y="190.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet.newBuilder (1 samples, 0.03%)</title><rect x="200.1" y="179.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.1" y="190.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet$Builder.access$000 (1 samples, 0.03%)</title><rect x="200.1" y="163.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.1" y="174.0"></text>
</g>
<g>
<title>com/google/protobuf/UnknownFieldSet$Builder.create (1 samples, 0.03%)</title><rect x="200.1" y="147.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.1" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.19%)</title><rect x="200.5" y="179.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.5" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (6 samples, 0.19%)</title><rect x="200.5" y="163.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.5" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (6 samples, 0.19%)</title><rect x="200.5" y="147.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.5" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.19%)</title><rect x="200.5" y="131.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.5" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.19%)</title><rect x="200.5" y="115.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.5" y="126.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (11 samples, 0.35%)</title><rect x="202.7" y="339.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.7" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.03%)</title><rect x="206.5" y="323.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.5" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.access$000 (1 samples, 0.03%)</title><rect x="206.5" y="307.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.5" y="318.0"></text>
</g>
<g>
<title>com/sodonnell/rocksdb/RocksDBTable.find (2,477 samples, 78.86%)</title><rect x="206.9" y="355.0" width="930.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.9" y="366.0">com/sodonnell/rocksdb/RocksDBTable.find</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,477 samples, 78.86%)</title><rect x="206.9" y="339.0" width="930.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.9" y="350.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="211.0" y="323.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.0" y="334.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="211.4" y="323.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="214.4" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.13%)</title><rect x="211.7" y="323.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="214.7" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,460 samples, 78.32%)</title><rect x="213.2" y="323.0" width="924.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.2" y="334.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (2,453 samples, 78.10%)</title><rect x="215.1" y="307.0" width="921.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="218.1" y="318.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="216.2" y="291.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="219.2" y="302.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="216.6" y="291.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="219.6" y="302.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="217.0" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="220.0" y="302.0"></text>
</g>
<g>
<title>free (4 samples, 0.13%)</title><rect x="217.4" y="291.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="220.4" y="302.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.06%)</title><rect x="218.9" y="291.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="221.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="219.6" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="222.6" y="302.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2,435 samples, 77.52%)</title><rect x="220.0" y="291.0" width="914.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="223.0" y="302.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int)</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="222.3" y="275.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="225.3" y="286.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (112 samples, 3.57%)</title><rect x="223.0" y="275.0" width="42.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="226.0" y="286.0">Java..</text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="224.1" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="227.1" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.10%)</title><rect x="224.5" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="227.5" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="225.6" y="259.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="228.6" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="226.4" y="259.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="229.4" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (17 samples, 0.54%)</title><rect x="226.8" y="259.0" width="6.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="229.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.06%)</title><rect x="227.9" y="243.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="230.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.16%)</title><rect x="228.6" y="243.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="231.6" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (7 samples, 0.22%)</title><rect x="230.5" y="243.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="233.5" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (62 samples, 1.97%)</title><rect x="233.2" y="259.0" width="23.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="236.2" y="270.0">j..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (1 samples, 0.03%)</title><rect x="233.9" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="236.9" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.06%)</title><rect x="234.3" y="243.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="237.3" y="254.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (6 samples, 0.19%)</title><rect x="235.0" y="243.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="238.0" y="254.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.06%)</title><rect x="237.3" y="243.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="240.3" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="238.0" y="243.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="241.0" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 0.38%)</title><rect x="238.4" y="243.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="241.4" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (8 samples, 0.25%)</title><rect x="242.9" y="243.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="245.9" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (28 samples, 0.89%)</title><rect x="245.9" y="243.0" width="10.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="248.9" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (18 samples, 0.57%)</title><rect x="248.2" y="227.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="251.2" y="238.0"></text>
</g>
<g>
<title>oopDesc::size() (6 samples, 0.19%)</title><rect x="250.1" y="211.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="253.1" y="222.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (7 samples, 0.22%)</title><rect x="252.3" y="211.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="255.3" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="254.9" y="227.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="257.9" y="238.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.10%)</title><rect x="255.3" y="227.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="258.3" y="238.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (23 samples, 0.73%)</title><rect x="256.4" y="259.0" width="8.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="259.4" y="270.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.06%)</title><rect x="258.3" y="243.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="261.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.19%)</title><rect x="259.1" y="243.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="262.1" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (6 samples, 0.19%)</title><rect x="261.3" y="243.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="264.3" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.13%)</title><rect x="263.6" y="243.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="266.6" y="254.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (3 samples, 0.10%)</title><rect x="265.1" y="275.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="268.1" y="286.0"></text>
</g>
<g>
<title>free (24 samples, 0.76%)</title><rect x="266.2" y="275.0" width="9.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="269.2" y="286.0"></text>
</g>
<g>
<title>tiny_size (13 samples, 0.41%)</title><rect x="270.3" y="259.0" width="4.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="273.3" y="270.0"></text>
</g>
<g>
<title>free_tiny (63 samples, 2.01%)</title><rect x="275.2" y="275.0" width="23.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="278.2" y="286.0">f..</text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="287.2" y="259.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="290.2" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="287.6" y="259.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="290.6" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (29 samples, 0.92%)</title><rect x="288.0" y="259.0" width="10.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="291.0" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (9 samples, 0.29%)</title><rect x="295.5" y="243.0" width="3.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="298.5" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (26 samples, 0.83%)</title><rect x="298.9" y="275.0" width="9.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="301.9" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.19%)</title><rect x="300.0" y="259.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="303.0" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 0.38%)</title><rect x="302.3" y="259.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="305.3" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.16%)</title><rect x="306.8" y="259.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="309.8" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (25 samples, 0.80%)</title><rect x="308.7" y="275.0" width="9.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="311.7" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.10%)</title><rect x="310.5" y="259.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="313.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.22%)</title><rect x="311.7" y="259.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="314.7" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (6 samples, 0.19%)</title><rect x="314.3" y="259.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="317.3" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.13%)</title><rect x="316.6" y="259.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="319.6" y="270.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="318.1" y="275.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="321.1" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="318.4" y="275.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="321.4" y="286.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="318.8" y="275.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="321.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,114 samples, 67.30%)</title><rect x="319.2" y="275.0" width="794.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="322.2" y="286.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,105 samples, 67.02%)</title><rect x="321.4" y="259.0" width="790.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="324.4" y="270.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;cha..</text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (1 samples, 0.03%)</title><rect x="321.8" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="324.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (27 samples, 0.86%)</title><rect x="322.2" y="243.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="325.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (9 samples, 0.29%)</title><rect x="322.2" y="227.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="325.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (17 samples, 0.54%)</title><rect x="325.6" y="227.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="328.6" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.19%)</title><rect x="326.7" y="211.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="329.7" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (8 samples, 0.25%)</title><rect x="328.9" y="211.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="331.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.03%)</title><rect x="332.0" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="335.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2,026 samples, 64.50%)</title><rect x="332.3" y="243.0" width="761.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="335.3" y="254.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, roc..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="335.7" y="227.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="338.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.06%)</title><rect x="336.1" y="227.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="339.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions) (2,002 samples, 63.74%)</title><rect x="336.8" y="227.0" width="752.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="339.8" y="238.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOpti..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.06%)</title><rect x="347.4" y="211.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="350.4" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.19%)</title><rect x="348.1" y="211.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="351.1" y="222.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="350.4" y="211.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="353.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (1 samples, 0.03%)</title><rect x="350.7" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="353.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.10%)</title><rect x="351.1" y="211.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="354.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (11 samples, 0.35%)</title><rect x="352.2" y="211.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="355.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="352.6" y="195.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="355.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.16%)</title><rect x="353.0" y="195.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="356.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="354.5" y="179.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="357.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.13%)</title><rect x="354.9" y="195.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="357.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.06%)</title><rect x="355.6" y="179.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="358.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (11 samples, 0.35%)</title><rect x="356.4" y="211.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.03%)</title><rect x="357.1" y="195.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="360.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (7 samples, 0.22%)</title><rect x="357.5" y="195.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="360.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="360.1" y="195.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="363.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::Env::Default() (26 samples, 0.83%)</title><rect x="360.5" y="211.0" width="9.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="363.5" y="222.0"></text>
</g>
<g>
<title>gettimeofday (26 samples, 0.83%)</title><rect x="360.5" y="195.0" width="9.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="363.5" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (21 samples, 0.67%)</title><rect x="362.4" y="179.0" width="7.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="365.4" y="190.0"></text>
</g>
<g>
<title>_res (17 samples, 0.54%)</title><rect x="363.9" y="163.0" width="6.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="366.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (1 samples, 0.03%)</title><rect x="370.3" y="211.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="373.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.03%)</title><rect x="370.6" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="373.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::HistogramImpl::Add(unsigned long long) (27 samples, 0.86%)</title><rect x="371.0" y="211.0" width="10.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="374.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (4 samples, 0.13%)</title><rect x="381.2" y="211.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="384.2" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="382.3" y="195.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="385.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.10%)</title><rect x="382.7" y="211.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="385.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.06%)</title><rect x="383.8" y="211.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="386.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long long) (7 samples, 0.22%)</title><rect x="384.5" y="211.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="387.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (24 samples, 0.76%)</title><rect x="387.2" y="211.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="390.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (1,589 samples, 50.59%)</title><rect x="396.2" y="211.0" width="596.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="399.2" y="222.0">rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocks..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="406.3" y="195.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="409.3" y="206.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="406.7" y="195.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="409.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (2 samples, 0.06%)</title><rect x="407.1" y="195.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="410.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.06%)</title><rect x="407.8" y="195.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="410.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.03%)</title><rect x="408.6" y="195.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="411.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (8 samples, 0.25%)</title><rect x="409.0" y="195.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="412.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (13 samples, 0.41%)</title><rect x="412.0" y="195.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="415.0" y="206.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="413.1" y="179.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="416.1" y="190.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (9 samples, 0.29%)</title><rect x="413.5" y="179.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="416.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetContext::ReportCounters() (202 samples, 6.43%)</title><rect x="416.9" y="195.0" width="75.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="419.9" y="206.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (36 samples, 1.15%)</title><rect x="418.7" y="179.0" width="13.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="421.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (161 samples, 5.13%)</title><rect x="432.3" y="179.0" width="60.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="435.3" y="190.0">rocksd..</text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (3 samples, 0.10%)</title><rect x="492.7" y="195.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="493.9" y="195.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="496.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (8 samples, 0.25%)</title><rect x="494.6" y="195.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="497.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int) (1,204 samples, 38.33%)</title><rect x="497.6" y="195.0" width="452.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="500.6" y="206.0">rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb:..</text>
</g>
<g>
<title>free (2 samples, 0.06%)</title><rect x="503.3" y="179.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="506.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.13%)</title><rect x="504.0" y="179.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="507.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (1,174 samples, 37.38%)</title><rect x="505.5" y="179.0" width="441.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="508.5" y="190.0">rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.06%)</title><rect x="518.7" y="163.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="521.7" y="174.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="519.4" y="163.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="522.4" y="174.0"></text>
</g>
<g>
<title>free (14 samples, 0.45%)</title><rect x="520.2" y="163.0" width="5.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="523.2" y="174.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="521.7" y="147.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="524.7" y="158.0"></text>
</g>
<g>
<title>tiny_size (9 samples, 0.29%)</title><rect x="522.0" y="147.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="525.0" y="158.0"></text>
</g>
<g>
<title>free_tiny (33 samples, 1.05%)</title><rect x="525.4" y="163.0" width="12.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="528.4" y="174.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="531.1" y="147.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="534.1" y="158.0"></text>
</g>
<g>
<title>tiny_free_no_lock (17 samples, 0.54%)</title><rect x="531.4" y="147.0" width="6.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="534.4" y="158.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (4 samples, 0.13%)</title><rect x="536.3" y="131.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="539.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (15 samples, 0.48%)</title><rect x="537.8" y="163.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="540.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (6 samples, 0.19%)</title><rect x="540.1" y="147.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="543.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (3 samples, 0.10%)</title><rect x="542.3" y="147.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="545.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::TryReadPropertiesWithGlobalSeqno(rocksdb::FilePrefetchBuffer*, rocksdb::Slice const&amp;, rocksdb::TableProperties**) (223 samples, 7.10%)</title><rect x="543.5" y="163.0" width="83.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="546.5" y="174.0">rocksdb::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.06%)</title><rect x="548.3" y="147.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="551.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (17 samples, 0.54%)</title><rect x="549.1" y="147.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="552.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (1 samples, 0.03%)</title><rect x="555.5" y="147.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="558.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (1 samples, 0.03%)</title><rect x="555.9" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="558.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (189 samples, 6.02%)</title><rect x="556.2" y="147.0" width="71.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="559.2" y="158.0">rocksdb:..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.06%)</title><rect x="561.1" y="131.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="564.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (172 samples, 5.48%)</title><rect x="561.9" y="131.0" width="64.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="564.9" y="142.0">rocksdb..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="567.5" y="115.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="570.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (149 samples, 4.74%)</title><rect x="567.9" y="115.0" width="56.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="570.9" y="126.0">rocks..</text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (4 samples, 0.13%)</title><rect x="570.1" y="99.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="573.1" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="571.6" y="99.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="574.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (9 samples, 0.29%)</title><rect x="572.0" y="99.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.0" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="573.9" y="83.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="576.9" y="94.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.10%)</title><rect x="574.3" y="83.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="577.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (119 samples, 3.79%)</title><rect x="575.4" y="99.0" width="44.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="578.4" y="110.0">rock..</text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.22%)</title><rect x="610.7" y="83.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="613.7" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.16%)</title><rect x="613.3" y="83.0" width="1.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="616.3" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (11 samples, 0.35%)</title><rect x="615.2" y="83.0" width="4.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="618.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="619.3" y="83.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="622.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="619.7" y="83.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="622.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (10 samples, 0.32%)</title><rect x="620.1" y="99.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="623.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::Value(rocksdb::Cache::Handle*) (6 samples, 0.19%)</title><rect x="623.9" y="115.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (1 samples, 0.03%)</title><rect x="626.1" y="115.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="629.1" y="126.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (2 samples, 0.06%)</title><rect x="626.5" y="131.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="629.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (17 samples, 0.54%)</title><rect x="627.2" y="163.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="630.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (10 samples, 0.32%)</title><rect x="629.1" y="147.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="632.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (7 samples, 0.22%)</title><rect x="630.2" y="131.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (2 samples, 0.06%)</title><rect x="632.9" y="147.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::DelegateCleanupsTo(rocksdb::Cleanable*) (1 samples, 0.03%)</title><rect x="633.6" y="163.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="636.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.13%)</title><rect x="634.0" y="163.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="637.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.03%)</title><rect x="634.4" y="147.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="637.4" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="634.4" y="131.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="637.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.06%)</title><rect x="634.8" y="147.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="637.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (2 samples, 0.06%)</title><rect x="635.5" y="163.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="638.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (377 samples, 12.00%)</title><rect x="636.3" y="163.0" width="141.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="639.3" y="174.0">rocksdb::DataBlock..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="646.0" y="147.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="649.0" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.06%)</title><rect x="646.4" y="147.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="649.4" y="158.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="647.1" y="147.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="650.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (180 samples, 5.73%)</title><rect x="647.5" y="147.0" width="67.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="650.5" y="158.0">rocksdb..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (33 samples, 1.05%)</title><rect x="689.2" y="131.0" width="12.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="692.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (34 samples, 1.08%)</title><rect x="701.6" y="131.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="704.6" y="142.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (34 samples, 1.08%)</title><rect x="701.6" y="115.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="704.6" y="126.0"></text>
</g>
<g>
<title>malloc (34 samples, 1.08%)</title><rect x="701.6" y="99.0" width="12.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="704.6" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (33 samples, 1.05%)</title><rect x="701.6" y="83.0" width="12.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="704.6" y="94.0"></text>
</g>
<g>
<title>default_zone_malloc (5 samples, 0.16%)</title><rect x="701.6" y="67.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="704.6" y="78.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (28 samples, 0.89%)</title><rect x="703.5" y="67.0" width="10.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="706.5" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (26 samples, 0.83%)</title><rect x="704.3" y="51.0" width="9.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="707.3" y="62.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (3 samples, 0.10%)</title><rect x="709.9" y="35.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="712.9" y="46.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (8 samples, 0.25%)</title><rect x="711.0" y="35.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="714.0" y="46.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="714.0" y="83.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="717.0" y="94.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.06%)</title><rect x="714.4" y="131.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (85 samples, 2.71%)</title><rect x="715.1" y="147.0" width="32.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="718.1" y="158.0">ro..</text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (13 samples, 0.41%)</title><rect x="742.2" y="131.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="745.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.22%)</title><rect x="744.1" y="115.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="747.1" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.19%)</title><rect x="744.4" y="99.0" width="2.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="747.4" y="110.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="746.7" y="115.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="749.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (79 samples, 2.52%)</title><rect x="747.1" y="147.0" width="29.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="750.1" y="158.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.10%)</title><rect x="761.0" y="131.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="764.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (33 samples, 1.05%)</title><rect x="762.1" y="131.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="765.1" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (23 samples, 0.73%)</title><rect x="765.9" y="115.0" width="8.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="768.9" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (6 samples, 0.19%)</title><rect x="774.5" y="131.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="777.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="776.8" y="147.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="779.8" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="777.1" y="147.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (13 samples, 0.41%)</title><rect x="777.9" y="163.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="780.9" y="174.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="780.1" y="147.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="783.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::DelegateCleanupsTo(rocksdb::Cleanable*) (2 samples, 0.06%)</title><rect x="780.5" y="147.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="783.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.13%)</title><rect x="781.3" y="147.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.3" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.10%)</title><rect x="781.6" y="131.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="784.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::Slice const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="782.8" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (1 samples, 0.03%)</title><rect x="783.1" y="163.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="786.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (426 samples, 13.56%)</title><rect x="783.5" y="163.0" width="160.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="786.5" y="174.0">rocksdb::IndexBlockI..</text>
</g>
<g>
<title>_dispatch_queue_attrs (10 samples, 0.32%)</title><rect x="871.8" y="147.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="874.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (15 samples, 0.48%)</title><rect x="875.6" y="147.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (156 samples, 4.97%)</title><rect x="881.2" y="147.0" width="58.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="884.2" y="158.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attrs (10 samples, 0.32%)</title><rect x="894.7" y="131.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="897.7" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.16%)</title><rect x="898.5" y="131.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="901.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (97 samples, 3.09%)</title><rect x="900.4" y="131.0" width="36.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.4" y="142.0">roc..</text>
</g>
<g>
<title>_platform_memcmp (60 samples, 1.91%)</title><rect x="914.3" y="115.0" width="22.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="917.3" y="126.0">_..</text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (8 samples, 0.25%)</title><rect x="936.8" y="131.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.16%)</title><rect x="939.8" y="147.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.8" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.16%)</title><rect x="941.7" y="147.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (1 samples, 0.03%)</title><rect x="943.6" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (4 samples, 0.13%)</title><rect x="943.9" y="163.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="945.4" y="163.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (1 samples, 0.03%)</title><rect x="946.2" y="163.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (1 samples, 0.03%)</title><rect x="946.6" y="179.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::TryReadPropertiesWithGlobalSeqno(rocksdb::FilePrefetchBuffer*, rocksdb::Slice const&amp;, rocksdb::TableProperties**) (1 samples, 0.03%)</title><rect x="946.9" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::DeleteValue(void*, void*) (2 samples, 0.06%)</title><rect x="947.3" y="179.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.3" y="190.0"></text>
</g>
<g>
<title>szone_free_definite_size (2 samples, 0.06%)</title><rect x="948.1" y="179.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="951.1" y="190.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (3 samples, 0.10%)</title><rect x="948.8" y="179.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="951.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (64 samples, 2.04%)</title><rect x="949.9" y="195.0" width="24.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.9" y="206.0">r..</text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.06%)</title><rect x="957.5" y="179.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="960.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (28 samples, 0.89%)</title><rect x="958.2" y="179.0" width="10.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.2" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="959.3" y="163.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="962.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (18 samples, 0.57%)</title><rect x="959.7" y="163.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.7" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="962.7" y="147.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="965.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.22%)</title><rect x="963.1" y="147.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.1" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.16%)</title><rect x="963.8" y="131.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="966.8" y="142.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="965.7" y="147.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="968.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.19%)</title><rect x="966.5" y="163.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (14 samples, 0.45%)</title><rect x="968.7" y="179.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.7" y="190.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.22%)</title><rect x="971.4" y="163.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="974.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (49 samples, 1.56%)</title><rect x="974.0" y="195.0" width="18.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="977.0" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="992.4" y="195.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::port::PhysicalCoreID() (252 samples, 8.02%)</title><rect x="993.1" y="211.0" width="94.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.1" y="222.0">rocksdb::po..</text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.10%)</title><rect x="1087.8" y="211.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::Env::Default() (1 samples, 0.03%)</title><rect x="1088.9" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (5 samples, 0.16%)</title><rect x="1089.3" y="227.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.03%)</title><rect x="1091.2" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long long) (1 samples, 0.03%)</title><rect x="1091.6" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long long) (1 samples, 0.03%)</title><rect x="1091.9" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.06%)</title><rect x="1092.3" y="227.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.3" y="238.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="1093.1" y="227.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.03%)</title><rect x="1093.5" y="243.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.5" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (49 samples, 1.56%)</title><rect x="1093.8" y="243.0" width="18.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.8" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="1095.0" y="227.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1098.0" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (42 samples, 1.34%)</title><rect x="1095.7" y="227.0" width="15.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.7" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1096.8" y="211.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1099.8" y="222.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (38 samples, 1.21%)</title><rect x="1097.2" y="211.0" width="14.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.2" y="222.0"></text>
</g>
<g>
<title>malloc (36 samples, 1.15%)</title><rect x="1098.0" y="195.0" width="13.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1101.0" y="206.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.06%)</title><rect x="1098.3" y="179.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1101.3" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (33 samples, 1.05%)</title><rect x="1099.1" y="179.0" width="12.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1102.1" y="190.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (31 samples, 0.99%)</title><rect x="1099.8" y="163.0" width="11.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1102.8" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (31 samples, 0.99%)</title><rect x="1099.8" y="147.0" width="11.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1102.8" y="158.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (3 samples, 0.10%)</title><rect x="1107.7" y="131.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1110.7" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (7 samples, 0.22%)</title><rect x="1108.9" y="131.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1111.9" y="142.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.06%)</title><rect x="1111.5" y="227.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.5" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (3 samples, 0.10%)</title><rect x="1112.2" y="259.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.2" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (23 samples, 0.73%)</title><rect x="1113.4" y="275.0" width="8.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.4" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="1114.1" y="259.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1117.1" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (19 samples, 0.60%)</title><rect x="1114.9" y="259.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.9" y="270.0"></text>
</g>
<g>
<title>malloc (18 samples, 0.57%)</title><rect x="1115.2" y="243.0" width="6.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1118.2" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (18 samples, 0.57%)</title><rect x="1115.2" y="227.0" width="6.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1118.2" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (18 samples, 0.57%)</title><rect x="1115.2" y="211.0" width="6.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1118.2" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (18 samples, 0.57%)</title><rect x="1115.2" y="195.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1118.2" y="206.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (2 samples, 0.06%)</title><rect x="1120.1" y="179.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1123.1" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.10%)</title><rect x="1120.9" y="179.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1123.9" y="190.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.03%)</title><rect x="1122.0" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.0" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1122.4" y="275.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1125.4" y="286.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="1122.8" y="275.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1125.8" y="286.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (31 samples, 0.99%)</title><rect x="1123.1" y="275.0" width="11.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.1" y="286.0"></text>
</g>
<g>
<title>malloc (30 samples, 0.96%)</title><rect x="1123.5" y="259.0" width="11.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1126.5" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (29 samples, 0.92%)</title><rect x="1123.9" y="243.0" width="10.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1126.9" y="254.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="1124.6" y="227.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1127.6" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (25 samples, 0.80%)</title><rect x="1125.0" y="227.0" width="9.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1128.0" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (24 samples, 0.76%)</title><rect x="1125.4" y="211.0" width="9.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1128.4" y="222.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="1132.9" y="195.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1135.9" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.10%)</title><rect x="1133.3" y="195.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1136.3" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1134.4" y="227.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1137.4" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1134.8" y="291.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.8" y="302.0"></text>
</g>
<g>
<title>szone_free_definite_size (2 samples, 0.06%)</title><rect x="1135.2" y="291.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1138.2" y="302.0"></text>
</g>
<g>
<title>vtable for std::__1::messages&lt;char&gt; (2 samples, 0.06%)</title><rect x="1135.9" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (2 samples, 0.06%)</title><rect x="1136.7" y="307.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.7" y="318.0"></text>
</g>
<g>
<title>thread_start (117 samples, 3.72%)</title><rect x="1137.4" y="403.0" width="44.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1140.4" y="414.0">thre..</text>
</g>
<g>
<title>_pthread_start (117 samples, 3.72%)</title><rect x="1137.4" y="387.0" width="44.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1140.4" y="398.0">_pth..</text>
</g>
<g>
<title>_pthread_body (117 samples, 3.72%)</title><rect x="1137.4" y="371.0" width="44.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1140.4" y="382.0">_pth..</text>
</g>
<g>
<title>java_start(Thread*) (117 samples, 3.72%)</title><rect x="1137.4" y="355.0" width="44.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1140.4" y="366.0">java..</text>
</g>
<g>
<title>GCTaskThread::run() (97 samples, 3.09%)</title><rect x="1137.4" y="339.0" width="36.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.4" y="350.0">GCT..</text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (45 samples, 1.43%)</title><rect x="1137.4" y="323.0" width="16.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.4" y="334.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="1137.4" y="307.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.4" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (42 samples, 1.34%)</title><rect x="1137.8" y="307.0" width="15.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.8" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (42 samples, 1.34%)</title><rect x="1137.8" y="291.0" width="15.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.8" y="302.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (38 samples, 1.21%)</title><rect x="1138.2" y="275.0" width="14.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1141.2" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (38 samples, 1.21%)</title><rect x="1138.2" y="259.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.2" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (36 samples, 1.15%)</title><rect x="1138.2" y="243.0" width="13.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1141.2" y="254.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="1151.7" y="243.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1154.7" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1152.1" y="227.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1155.1" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1152.1" y="211.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1155.1" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.10%)</title><rect x="1152.4" y="275.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.10%)</title><rect x="1152.4" y="259.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1155.4" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (2 samples, 0.06%)</title><rect x="1153.6" y="307.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="1153.6" y="291.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1156.6" y="302.0"></text>
</g>
<g>
<title>GCTaskManager::note_completion(unsigned int) (2 samples, 0.06%)</title><rect x="1154.3" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.3" y="334.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.06%)</title><rect x="1154.3" y="307.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.3" y="318.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.06%)</title><rect x="1154.3" y="291.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.3" y="302.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="1154.3" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.3" y="286.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.03%)</title><rect x="1154.7" y="275.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1157.7" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1154.7" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.7" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1154.7" y="243.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1157.7" y="254.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (4 samples, 0.13%)</title><rect x="1155.1" y="323.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.1" y="334.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (4 samples, 0.13%)</title><rect x="1155.1" y="307.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.1" y="318.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (1 samples, 0.03%)</title><rect x="1155.8" y="291.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.8" y="302.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1155.8" y="275.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.8" y="286.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1156.2" y="291.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.2" y="302.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (5 samples, 0.16%)</title><rect x="1156.6" y="323.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="334.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (4 samples, 0.13%)</title><rect x="1156.6" y="307.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="318.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (3 samples, 0.10%)</title><rect x="1156.6" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="302.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (3 samples, 0.10%)</title><rect x="1156.6" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="286.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.03%)</title><rect x="1157.7" y="291.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="302.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1157.7" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.7" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1158.1" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="318.0"></text>
</g>
<g>
<title>ProtectionDomainCacheTable::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1158.1" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.1" y="302.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (30 samples, 0.96%)</title><rect x="1158.4" y="323.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.4" y="334.0"></text>
</g>
<g>
<title>SpinPause (30 samples, 0.96%)</title><rect x="1158.4" y="307.0" width="11.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1161.4" y="318.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (8 samples, 0.25%)</title><rect x="1169.7" y="323.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="334.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (7 samples, 0.22%)</title><rect x="1169.7" y="307.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="318.0"></text>
</g>
<g>
<title>CodeBlobToOopClosure::do_nmethod(nmethod*) (4 samples, 0.13%)</title><rect x="1169.7" y="291.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="302.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (4 samples, 0.13%)</title><rect x="1169.7" y="275.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="286.0"></text>
</g>
<g>
<title>Relocation::unpack_2_ints(int&amp;, int&amp;) (1 samples, 0.03%)</title><rect x="1170.1" y="259.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.1" y="270.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (2 samples, 0.06%)</title><rect x="1170.5" y="259.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.5" y="270.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.03%)</title><rect x="1170.5" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="254.0"></text>
</g>
<g>
<title>Universe::non_oop_word() (1 samples, 0.03%)</title><rect x="1170.8" y="243.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.8" y="254.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1171.2" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="302.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="1171.6" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="302.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (1 samples, 0.03%)</title><rect x="1172.0" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="302.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.03%)</title><rect x="1172.0" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.0" y="286.0"></text>
</g>
<g>
<title>OopMapStream::OopMapStream(OopMap*, int) (1 samples, 0.03%)</title><rect x="1172.0" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.0" y="270.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1172.0" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="254.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.03%)</title><rect x="1172.3" y="307.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.3" y="318.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (2 samples, 0.06%)</title><rect x="1172.7" y="323.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.7" y="334.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (2 samples, 0.06%)</title><rect x="1172.7" y="307.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.7" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.06%)</title><rect x="1172.7" y="291.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.06%)</title><rect x="1172.7" y="275.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.7" y="286.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.06%)</title><rect x="1172.7" y="259.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1175.7" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.06%)</title><rect x="1172.7" y="243.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.7" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="1172.7" y="227.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1175.7" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1173.5" y="323.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1176.5" y="334.0"></text>
</g>
<g>
<title>VMThread::run() (10 samples, 0.32%)</title><rect x="1173.8" y="339.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="350.0"></text>
</g>
<g>
<title>VMThread::loop() (10 samples, 0.32%)</title><rect x="1173.8" y="323.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="334.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (10 samples, 0.32%)</title><rect x="1173.8" y="307.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="318.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (10 samples, 0.32%)</title><rect x="1173.8" y="291.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="302.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (10 samples, 0.32%)</title><rect x="1173.8" y="275.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="286.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (10 samples, 0.32%)</title><rect x="1173.8" y="259.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="270.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (10 samples, 0.32%)</title><rect x="1173.8" y="243.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="254.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (10 samples, 0.32%)</title><rect x="1173.8" y="227.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="238.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (1 samples, 0.03%)</title><rect x="1173.8" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="222.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (1 samples, 0.03%)</title><rect x="1173.8" y="195.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="206.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1173.8" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="190.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1173.8" y="163.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="174.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.03%)</title><rect x="1173.8" y="147.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1176.8" y="158.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1173.8" y="131.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1173.8" y="115.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1176.8" y="126.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (2 samples, 0.06%)</title><rect x="1174.2" y="211.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="222.0"></text>
</g>
<g>
<title>GCTraceTime::~GCTraceTime() (1 samples, 0.03%)</title><rect x="1174.2" y="195.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="206.0"></text>
</g>
<g>
<title>TimePartitions::update_statistics(GCPhase*) (1 samples, 0.03%)</title><rect x="1174.2" y="179.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="190.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (1 samples, 0.03%)</title><rect x="1174.6" y="195.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.6" y="206.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phase3(DiscoveredList&amp;, bool, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.03%)</title><rect x="1174.6" y="179.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.6" y="190.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (7 samples, 0.22%)</title><rect x="1175.0" y="211.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="222.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (7 samples, 0.22%)</title><rect x="1175.0" y="195.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="206.0"></text>
</g>
<g>
<title>WatcherThread::run() (10 samples, 0.32%)</title><rect x="1177.6" y="339.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="350.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.03%)</title><rect x="1177.6" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="334.0"></text>
</g>
<g>
<title>StatSampler::sample_data(PerfDataList*) (1 samples, 0.03%)</title><rect x="1177.6" y="307.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="318.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.03%)</title><rect x="1177.6" y="291.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="302.0"></text>
</g>
<g>
<title>MutableSpace::used_in_words() const (1 samples, 0.03%)</title><rect x="1177.6" y="275.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="286.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (9 samples, 0.29%)</title><rect x="1178.0" y="323.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 0.29%)</title><rect x="1178.0" y="307.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.29%)</title><rect x="1178.0" y="291.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.25%)</title><rect x="1178.0" y="275.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.22%)</title><rect x="1178.4" y="259.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1181.4" y="270.0"></text>
</g>
<g>
<title>pthread_cond_timedwait (1 samples, 0.03%)</title><rect x="1181.0" y="275.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (23 samples, 0.73%)</title><rect x="1181.4" y="403.0" width="8.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
</g>
</svg>
