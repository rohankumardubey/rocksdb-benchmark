// automatically generated by the FlatBuffers compiler, do not modify

package com.sodonnell.rocksdb.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Acl extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Acl getRootAsAcl(ByteBuffer _bb) { return getRootAsAcl(_bb, new Acl()); }
  public static Acl getRootAsAcl(ByteBuffer _bb, Acl obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Acl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte type() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte scope() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public short permissions() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 0; }

  public static int createAcl(FlatBufferBuilder builder,
      int nameOffset,
      byte type,
      byte scope,
      short permissions) {
    builder.startTable(4);
    Acl.addName(builder, nameOffset);
    Acl.addPermissions(builder, permissions);
    Acl.addScope(builder, scope);
    Acl.addType(builder, type);
    return Acl.endAcl(builder);
  }

  public static void startAcl(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(1, type, 0); }
  public static void addScope(FlatBufferBuilder builder, byte scope) { builder.addByte(2, scope, 0); }
  public static void addPermissions(FlatBufferBuilder builder, short permissions) { builder.addShort(3, permissions, 0); }
  public static int endAcl(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Acl get(int j) { return get(new Acl(), j); }
    public Acl get(Acl obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

