// automatically generated by the FlatBuffers compiler, do not modify

package com.sodonnell.rocksdb.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DirectoryInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static DirectoryInfo getRootAsDirectoryInfo(ByteBuffer _bb) { return getRootAsDirectoryInfo(_bb, new DirectoryInfo()); }
  public static DirectoryInfo getRootAsDirectoryInfo(ByteBuffer _bb, DirectoryInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DirectoryInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long objectId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long updateId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long parentId() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long creationTime() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long modificationTime() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String name() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public String owner() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer ownerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String group() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer groupAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer groupInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public short permissions() { int o = __offset(20); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public com.sodonnell.rocksdb.flatbuffer.Acl acls(int j) { return acls(new com.sodonnell.rocksdb.flatbuffer.Acl(), j); }
  public com.sodonnell.rocksdb.flatbuffer.Acl acls(com.sodonnell.rocksdb.flatbuffer.Acl obj, int j) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int aclsLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public com.sodonnell.rocksdb.flatbuffer.Acl.Vector aclsVector() { return aclsVector(new com.sodonnell.rocksdb.flatbuffer.Acl.Vector()); }
  public com.sodonnell.rocksdb.flatbuffer.Acl.Vector aclsVector(com.sodonnell.rocksdb.flatbuffer.Acl.Vector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDirectoryInfo(FlatBufferBuilder builder,
      long objectId,
      long updateId,
      long parentId,
      long creationTime,
      long modificationTime,
      int nameOffset,
      int ownerOffset,
      int groupOffset,
      short permissions,
      int aclsOffset) {
    builder.startTable(10);
    DirectoryInfo.addModificationTime(builder, modificationTime);
    DirectoryInfo.addCreationTime(builder, creationTime);
    DirectoryInfo.addParentId(builder, parentId);
    DirectoryInfo.addUpdateId(builder, updateId);
    DirectoryInfo.addObjectId(builder, objectId);
    DirectoryInfo.addAcls(builder, aclsOffset);
    DirectoryInfo.addGroup(builder, groupOffset);
    DirectoryInfo.addOwner(builder, ownerOffset);
    DirectoryInfo.addName(builder, nameOffset);
    DirectoryInfo.addPermissions(builder, permissions);
    return DirectoryInfo.endDirectoryInfo(builder);
  }

  public static void startDirectoryInfo(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addObjectId(FlatBufferBuilder builder, long objectId) { builder.addLong(0, objectId, 0L); }
  public static void addUpdateId(FlatBufferBuilder builder, long updateId) { builder.addLong(1, updateId, 0L); }
  public static void addParentId(FlatBufferBuilder builder, long parentId) { builder.addLong(2, parentId, 0L); }
  public static void addCreationTime(FlatBufferBuilder builder, long creationTime) { builder.addLong(3, creationTime, 0L); }
  public static void addModificationTime(FlatBufferBuilder builder, long modificationTime) { builder.addLong(4, modificationTime, 0L); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(5, nameOffset, 0); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(6, ownerOffset, 0); }
  public static void addGroup(FlatBufferBuilder builder, int groupOffset) { builder.addOffset(7, groupOffset, 0); }
  public static void addPermissions(FlatBufferBuilder builder, short permissions) { builder.addShort(8, permissions, 0); }
  public static void addAcls(FlatBufferBuilder builder, int aclsOffset) { builder.addOffset(9, aclsOffset, 0); }
  public static int createAclsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAclsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDirectoryInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDirectoryInfoBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedDirectoryInfoBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DirectoryInfo get(int j) { return get(new DirectoryInfo(), j); }
    public DirectoryInfo get(DirectoryInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

